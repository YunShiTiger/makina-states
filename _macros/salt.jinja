{#
# see for doc:
# - doc/ref/formulaes/_macros/salt.rst
#}
{%- set nodetypes_registry = salt['mc_nodetypes.registry']() %}
{%- set isLxc = nodetypes_registry.is.lxccontainer %}
{%- set isTravis = nodetypes_registry.is.travis %}
{%- set localsettings = salt['mc_localsettings.settings']() %}
{%- set locs = salt['mc_locations.settings']() %}

{%- set resolver = salt['mc_utils.format_resolve'] %}

{%- set settings = salt['mc_salt.settings']() %}

{%- set group = localsettings.group %}
{%- set groupId = localsettings.groupId %}

{#-
# You can overrides this dict via the salt pillar entry 'confRepos', see bellow
# external base repositories to checkout
# Add also here the formumlas to checkout
# and if neccesary the symlink to wire on the salt root tree
#}
{%- set confRepos = settings.confRepos %}

{%- set saltCommonData = settings.saltCommonData %}
{%- set saltMinionData = settings.saltMinionData %}
{%- set saltMasterData = settings.saltMasterData %}

{#- mastersalt daemon overrides #}
{%- set mastersaltCommonData = settings.mastersaltCommonData %}
{%- set mastersaltMasterData = settings.mastersaltMasterData %}
{%- set mastersaltMinionData = settings.mastersaltMinionData %}

{#- common pillar overrides #}
{%- set mastersaltCommonPillar = settings.mastersaltCommonPillar %}
{%- set mastersaltMasterPillar = settings.mastersaltMasterPillar %}
{%- set mastersaltMinionPillar = settings.mastersaltMinionPillar %}
{%- set mastersalt_pillar      = settings.mastersalt_pillar      %}
{%- set saltCommonPillar       = settings.saltCommonPillar       %}
{%- set saltMasterPillar       = settings.saltMasterPillar       %}
{%- set saltMinionPillar       = settings.saltMinionPillar       %}
{%- set salt_pillar            = settings.salt_pillar            %}

{#-
########################################
# default exposed global variables
########################################
# SALT VARIABLES
#}
{%- set saltname       = settings.saltname       %}
{%- set saltprefix     = settings.saltprefix     %}
{%- set prefix         = settings.prefix         %}
{%- set projectsRoot   = settings.projectsRoot   %}
{%- set vagrantRoot    = settings.vagrantRoot    %}
{%- set dockerRoot     = settings.dockerRoot     %}
{%- set saltroot       = settings.saltroot       %}
{%- set saltRoot       = settings.saltRoot       %}
{%- set confPrefix     = settings.confPrefix     %}
{%- set cachePrefix    = settings.cachePrefix    %}
{%- set runPrefix      = settings.runPrefix      %}
{%- set logPrefix      = settings.logPrefix      %}
{%- set pillarRoot     = settings.pillarRoot     %}
{%- set msr            = settings.msr            %}
{%- set resetperms     = settings.resetperms     %}
{%- set saltbinpath    = settings.saltbinpath    %}

{#- MASTERSALT VARIABLES #}
{%- set msaltname      =  settings.msaltname      %}
{%- set msaltprefix    =  settings.msaltprefix    %}
{%- set mprefix        =  settings.mprefix        %}
{%- set mprojects_root =  settings.mprojects_root %}
{%- set mvagrant_root  =  settings.mvagrant_root  %}
{%- set msaltroot      =  settings.msaltroot      %}
{%- set msaltRoot      =  settings.msaltRoot      %}
{%- set mconfPrefix    =  settings.mconfPrefix    %}
{%- set mcachePrefix   =  settings.mcachePrefix   %}
{%- set mrunPrefix     =  settings.mrunPrefix     %}
{%- set mlogPrefix     =  settings.mlogPrefix     %}
{%- set mpillarRoot    =  settings.mpillarRoot    %}
{%- set mmsr           =  settings.mmsr           %}
{%- set mresetperms    =  settings.mresetperms    %}
{%- set msaltbinpath   =  settings.msaltbinpath   %}

{#- mappings #}
{% set data_mappings = settings.data_mappings %}

{% macro salt_dummies(name) %}
{#- only here for orchestration purposes #}
dummy-pre-{{ name }}-service-restart:
  mc_proxy.hook: []
dummy-post-{{ name }}-service-restart:
  mc_proxy.hook: []
dummy-pre-{{ name }}-checkouts:
  mc_proxy.hook: []
dummy-{{ name }}-layout:
  mc_proxy.hook: []
{% endmacro %}
{#-
# dummies daemon states for orchestration
#}
{% macro daemon_dummies(mode) %}
{% for service_name in data_mappings %}
{% set data = data_mappings[service_name][mode] %}
# salt master/minion state will attach to this for the minion to be configured
# before being really restarted
dummy-pre-{{ data.service_name }}-service-restart:
  mc_proxy.hook:
    - require:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
      {# deactivated for now, seems useless with recent salt fixes toward
         restarts
      {%- if data.service_name == 'minion' %}
      - mc_proxy: dummy-post-{{ data.name }}-master-service-restart
      {%- endif %}
      #}

dummy-pre-{{ data.daemon_name }}-service-restart:
  mc_proxy.hook: []
dummy-post-{{ data.daemon_name }}-service-restart:
   mc_proxy.hook:
    - require_in:
      - mc_proxy: dummy-post-{{ data.name }}-service-restart
dummy-post-{{ data.service_name }}-service-restart:
   mc_proxy.hook:
    - require:
      - mc_proxy: dummy-post-{{ data.daemon_name }}-service-restart
{% endfor %}
{% endmacro %}

{#-
###############################
# Common installation stuff
###############################
#}
{% macro install_makina_states(mode='salt', adata=None, full=True) %}
{% if not adata %}
{%-   if mode=='salt'%}
{%-     set data = resolver(saltCommonData) %}
{%-   else %}
{%-     set data = resolver(mastersaltCommonData) %}
{%-    endif %}
{%- else %}
{%-   set data = resolver(adata) %}
{%- endif %}
{%- set localRoot = resolver('{salt_root}', data) %}
{%- set prefix = resolver('{prefix}', data) %}
{%- set confPrefix = resolver('{conf_prefix}', data) %}
{%- set cachePrefix = resolver('{cache_prefix}', data) %}
{%- set cachedir = resolver('{cachedir}', data) %}
{%- set runPrefix = resolver('{run_prefix}', data) %}
{%- set logPrefix = resolver('{log_prefix}', data) %}
{%- set pillarRoot = resolver('{pillar_root}', data) %}
{%- set localMsr = resolver('{salt_root}/makina-states', data) %}
{%- set json_data = salt['mc_utils.json_dump'](resolver(data)) %}
{%- set repos = data['confRepos'] %}
{% for cur_name in  [
  'salt',
  'salt-call',
  'salt-cloud',
  'salt-cp',
  'salt-key',
  'salt-master',
  'salt-minion',
  'salt-run',
  'salt-ssh',
  'salt-syndic',
] -%}
{%-  if cur_name == 'salt' %}
{%-    set src = 'salt' %}
{%-  else %}
{%-    set src = 'salt-wrapper' %}
{%- endif %}
salt-{{ data.name }}-{{cur_name}}-bin:
  file.managed:
    - name: {{ data.bin_dir }}/{{ data.pref_name }}{{cur_name}}
    - source: salt://makina-states/files/usr/bin/{{ src }}
    - mode: 755
    - makedirs: True
    - template: jinja
    - salt_data: |
                 {{ json_data }}
    - bin_name: {{cur_name}}
    - require:
      - cmd: update-makinastates-{{ data.name }}
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
{% endfor %}
{% for manfile in [
        'salt.1',
        'salt-call.1',
        'salt-cloud.1',
        'salt-cp.1',
        'salt-key.1',
        'salt-master.1',
        'salt-minion.1',
        'salt-run.1',
        'salt-ssh.1',
        'salt-syndic.1',
        'salt.7',] %}
{% set mansection = manfile.split('.')[1] %}
salt-man-{{manfile}}-{{ data.name }}:
  file.symlink:
    - name: /usr/share/man/man{{mansection}}/{{manfile}}
    - target: {{data.msr}}/src/salt/doc/man/{{manfile}}
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
{% endfor %}

salt-{{ data.name }}-bootsalt-link-bin:
  file.symlink:
    - name: /usr/bin/boot-{{data.name}}.sh
    - target: {{ data.msr }}/_scripts/boot-salt.sh
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.name }}-{{ group }}:
  group.present:
    - name: {{ group }}
    - system: True
    {% if groupId %}- gid: {{ groupId }}{% endif %}

{{data.name}}-checkalive-job:
  {% if not data.cron_check_alive %}
  cron.absent:
  {% else %}
  cron.present:
    - identifier: "salt checkalive job"
    - minute: "{{data.cron_minion_checkalive}}"
  {% endif %}
    - name: {{msr}}/_scripts/boot-salt.sh --check-alive --quiet -C --no-colors

{{data.name}}-sync-job:
  {% if not data.cron_auto_sync %}
  cron.absent:
  {% else %}
  cron.present:
    - identifier: "salt code synchronization job"
    - minute: "{{data.cron_sync_minute}}"
    - hour: "{{data.cron_sync_hour}}"
  {% endif %}
    - name: {{msr}}/_scripts/boot-salt.sh --refresh-modules --quiet -C --no-colors

{{data.name}}-clean-job:
  {% if not data.cron_auto_clean %}
  cron.absent:
  {% else %}
  cron.present:
    - identifier: "salt code cleanup job"
    - minute: "{{data.cron_clean_minute}}"
    - hour: "{{data.cron_clean_hour}}"
  {% endif %}
    - name: {{msr}}/_scripts/boot-salt.sh --cleanup --quiet -C --no-colors

{#
{{data.name}}-upgrade-job:
  {% if not data.cron_auto_upgrade %}
  cron.absent:
  {% else %}
  cron.present:
    - identifier: "salt upgrade job"
    - hour: {{data.cron_upgrade_hour}}
    - minute: {{data.cron_upgrade_minute}}
  {% endif %}
    - name: {{msr}}/_scripts/boot-salt.sh --upgrade -C --no-colors
#}

{# deactivated in favor of paas platform and manual work on mastersalt node... #}
{{data.name}}-upgrade-job:
  cron.absent:
    - identifier: "salt upgrade job"
    - hour: {{data.cron_upgrade_hour}}
    - minute: {{data.cron_upgrade_minute}}
    - name: {{msr}}/_scripts/boot-salt.sh --upgrade -C --no-colors

{#-
# this is really factored
# idea is to create dirs, then requires daemons to issue the chmod
# without restarting them, otherwise the watch function will
# restart them everytime !
#}
salt-etc-{{ data.name }}-dirs:
  file.directory:
    - names:
      - {{ confPrefix }}
      - {{ confPrefix }}/master.d
      - {{ confPrefix }}/minion.d
    - user: root
    - group: {{ group }}
    - dir_mode: 0770
    - makedirs: True
    - require:
      - group: salt-{{ data.name }}-{{ group }}
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
      - mc_proxy: dummy-{{data.name}}-layout

etc-{{ data.name }}-dirs:
  file.directory:
    - names:
      - {{ localRoot }}
      - {{ localRoot }}/makina-projects
      - {{ pillarRoot }}
      - {{ prefix }}/projects
      {# - {{ prefix }}/vagrant #}
    - user: root
    - group: {{ group }}
    - file_mode: "0770"
    - dir_mode: "0770"
    - makedirs: True
    - require:
      - group: salt-{{ data.name }}-{{ group }}

open-{{ data.name }}-dirs:
  file.directory:
    - name: {{ locs.apps_dir }}
    - user: root
    - group: {{ group }}
  cmd.run:
    - name: chmod 0775 {{ locs.apps_dir }}
    - user: root
    - require:
      - file: open-{{ data.name }}-dirs
      - group: salt-{{ data.name }}-{{ group }}

{#- Keep those 3 first following in sync with buildout mr.developer content
# those repos are the one needed to bootstrap the core daemons #}
{% for i, rdata in repos.items() -%}
{%- set git = rdata['target']+'/.git' %}
{%- set rev = rdata.get('rev', None) %}
{%- set link = rdata.get('link', False) %}
salt-{{ data.name }}-{{ i }}:
{#- on next runs as we reset perms on repos, just set filemode=false
# do not use cwd as if dir does not exist, if will fail the entire state
# For formulas, also create the symlink if neccesary #}
  cmd.run:
    - name: cd "{{ rdata['target'] }}" && git config --local core.filemode false
    - require:
      - mc_proxy: dummy-pre-{{ data.name }}-checkouts
    - onlyif: ls -d "{{ git }}"
    - unless: if [[ -d "{{ git }}" ]];then cd "{{ rdata['target'] }}" && grep -q "filemode = false" .git/config;fi
  {# on each run, update the code -#}
  mc_git.latest:
    - name: {{ rdata['name'] }}
    - target: {{ rdata['target'] }}
    {% if rev %}
    - rev: {{ rev }}
    {% endif %}
    - require:
      - cmd: salt-{{ data.name }}-{{ i }}
  {% if link %}
  file.symlink:
    - target:  {{link.target}}
    - name:  {{link.name}}
    - require:
      - mc_git: salt-{{ data.name }}-{{ i }}
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
  {% endif %}
{% endfor %}

salt-{{ data.name }}-makina-states-dirs:
  file.directory:
    - names:
      {% for i in data.salt_modules -%}
      - {{ localRoot }}/{{ i }}
      {% endfor %}

{#- update makina-state #}
salt-{{ data.name }}-buildout-bootstrap:
  cmd.run:
    - name: |
            py="python";
            if [ -e "{{ data.venv }}/bin/python" ];then
              py="{{ data.venv }}/bin/python";
            fi;
            $py bootstrap.py
    - cwd: {{ data.msr }}
    - unless: test "$(cat buildout.cfg|md5sum|awk '{print $1}')" = "$(cat .saltchk)"
    - require_in:
      - cmd: update-makinastates-{{ data.name }}
    - require:
      - mc_git: salt-{{ data.name }}-makina-states

update-makinastates-{{ data.name }}:
  cmd.run:
    - name: |
            bin/buildout &&\
            cat buildout.cfg|md5sum|awk '{print $1}'>.saltchk &&\
            touch "{{ data.msr }}/.restart_salt" &&\
            touch "{{ data.msr }}/.restart_msalt" &&\
            touch "{{ data.msr }}/.restart_salt_minion" &&\
            touch "{{ data.msr }}/.restart_msalt_minion"
    - cwd: {{ data.msr }}
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
    - unless: test "$(cat buildout.cfg|md5sum|awk '{print $1}')" = "$(cat .saltchk)"

salt-{{ data.name }}-dirs-restricted:
  file.directory:
    - names:
      - {{ data.log_prefix }}
      - {{ data.run_prefix }}/{{ data.name }}
      - {{ data.cache_prefix }}
      - {{ data.conf_prefix }}/pki
    - msr: {{ data.msr }}
    - user: root
    - group: {{ group }}
    - file_mode: 0750
    - dir_mode: 2750
    - makedirs: True
    - require:
      - file: salt-{{ data.name }}-makina-states-dirs
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

# update makina-state
salt-{{ data.name }}-logrotate:
  file.managed:
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
    - template: jinja
    - name: {{ locs.conf_dir }}/logrotate.d/{{ data.name }}.conf
    - source: salt://makina-states/files/etc/logrotate.d/salt.conf
    - salt_data: |
                 {{ json_data }}

{#- Fix permissions and ownerships
# recurse does not seem to work well to reset perms #}
etc-{{data.name}}-dirs-perms:
  cmd.run:
    - name: >
            {{data.resetperms }}
            --dmode 0770 --fmode 0770
            --user "root" --group "{{ localsettings.group }}"
            --paths {{ data.conf_prefix }}
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
      - mc_proxy: dummy-pre-{{data.name}}-service-restart

{#- recurse does not seem to work well to reset perms #}
{{data.name}}-projects-dirs-perms:
  cmd.run:
    - name: >
            {{ data.resetperms }}
            -u root -g "{{ localsettings.group }}"
            --dmode 0770 --fmode 0770
            --only-acls
            --paths "{{ data.projects_root }}"
    - require:
      - mc_proxy: dummy-pre-{{data.name}}-service-restart
      - cmd: etc-{{data.name}}-dirs-perms

{{data.name}}-dirs-perms:
  cmd.run:
    - name: >
            {{ data.resetperms }}
            --dmode 0770 --fmode 0770
            --user "root" --group "{{ localsettings.group }}"
            --paths "{{ data.salt_root }}"
            --paths "{{ data.pillar_root }}"
            --excludes "{{ data.salt_root }}.*\/files\/.*"
            --excludes "{{ data.salt_root }}/_grains"
    - require:
      - mc_proxy: dummy-pre-{{data.name}}-service-restart
      - cmd: etc-{{data.name}}-dirs-perms
      - cmd: {{data.name}}-projects-dirs-perms

{{data.name}}-dirs-restricted-perms:
  cmd.run:
    - name: >
            {{ resetperms }}
            --fmode 0750 --dmode 0750
            --user "root" --group "{{ localsettings.group }}"
            --paths "{{ data.log_prefix }}"
            --paths "{{ data.run_prefix }}/{{data.name}}"
            --paths "{{ data.cache_prefix }}"
            --paths "{{ data.cache_prefix }}"/{{data.name}}-minion
            --paths "{{ data.cache_prefix }}"/{{data.name}}-master
            --paths "{{ data.conf_prefix }}/pki"
            --excludes "mastersalt.*\/jobs\/.*"
    - require:
      - cmd: {{data.name}}-dirs-perms
      - cmd: etc-{{data.name}}-dirs-perms
      - file: salt-{{data.name}}-dirs-restricted
      - mc_proxy: dummy-pre-{{data.name}}-service-restart

{% endmacro %}

{#-
# SALT DAEMON MACRO
#}
{% macro install_salt_common_daemon(adata, full=True) %}
{% set data = resolver(adata) %}
{%- set localRoot = resolver('{salt_root}', data) %}
{%- set prefix = resolver('{prefix}', data) %}
{%- set confPrefix = resolver('{conf_prefix}', data) %}
{%- set cachePrefix = resolver('{cache_prefix}', data) %}
{%- set cachedir = resolver('{cachedir}', data) %}
{%- set runPrefix = resolver('{run_prefix}', data) %}
{%- set logPrefix = resolver('{log_prefix}', data) %}
{%- set pillarRoot = resolver('{pillar_root}', data) %}
{%- set localMsr = resolver('{salt_root}/makina-states', data) %}
{%- set json_data = salt['mc_utils.json_dump'](data) %}
salt-{{ data.daemon_name }}-conf-global:
  file.managed:
    - name: {{ confPrefix }}/{{ data.service_name }}.d/00_global.conf
    - template: jinja
    - makedirs: true
    - source: salt://makina-states/files/etc/salt/{{ data.service_name }}.d/00_global.conf
    - salt_data: |
                 {{ json_data }}
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

{{data.name}}-{{data.daemon_name}}-restart-job:
  {% if not data.cron_auto_restart %}
  cron.absent:
  {% else %}
  cron.present:
    - identifier: "salt {{data.service_name}} auto restart job"
    - hour: {{data['cron_{0}_restart_hour'.format(data['service_name'])]}}
    - minute: {{data['cron_{0}_restart_minute'.format(data['service_name'])]}}
  {% endif %}
    - name: {{msr}}/_scripts/boot-salt.sh --restart-{{data.service_name}}s -C --no-colors

salt-{{ data.daemon_name }}-conf:
  file.managed:
    - name: {{ confPrefix }}/{{ data.service_name }}
    - template: jinja
    - source: salt://makina-states/files/etc/salt/{{ data.service_name }}
    - salt_data: |
                 {{ json_data }}
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
      - mc_proxy: dummy-pre-{{ data.daemon_name }}-service-restart

{% if grains['os'] == 'Debian' -%}
salt-{{ data.daemon_name }}-job:
  file.managed:
    - name: {{ data['initd_dir'] }}/{{ data.daemon_name }}
    - template: jinja
    - source:  salt://makina-states/files/etc/init.d/salt-{{ data.service_name }}
    - mode: 755
    - root: {{ data.msr }}
    - saltname: {{ data.name }}
    - saltconfig: {{ confPrefix }}
    - salt_data: |
                 {{ json_data }}
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

      - mc_proxy: dummy-pre-{{ data.daemon_name }}-service-restart
{% endif %}

{% if grains['os'] == 'Ubuntu' -%}
salt-{{ data.daemon_name }}-job:
  file.managed:
    - name: {{ data.upstart_dir }}/{{ data.daemon_name }}.conf
    - template: jinja
    - source:  salt://makina-states/files/etc/init/salt-{{ data.service_name }}.conf
    - root: {{ data.msr }}
    - saltconfig: {{ confPrefix }}
    - saltname: {{ data.name }}
    - salt_data: |
                 {{ json_data }}
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
      - mc_proxy: dummy-pre-{{ data.daemon_name }}-service-restart
{% endif %}

salt-{{ data.daemon_name }}-cache:
  file.directory:
    - name: {{ cachedir }}
    - makedirs: True
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-pki:
  file.directory:
    - name: {{ confPrefix }}/pki/{{ data.service_name }}
    - makedirs: True
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-sock-dir:
  file.directory:
    - name: {{ runPrefix }}/{{data.name}}/{{ data.service_name }}
    - makedirs: True
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-logs:
  file.managed:
    - salt_data: |
                 {{ json_data }}
    - names:
      - {{ logPrefix }}/key
      - {{ logPrefix }}/{{ data.daemon_name }}
      - {{ logPrefix }}/syndic.log
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart

# done to mitigate authentication errors on restart
salt-restart-{{ data.daemon_name }}:
  cmd.run:
    - name: >
            service {{ data.daemon_name }} stop ;\
            service {{ data.daemon_name }} start &&\
            echo "Reloading {{ data.daemon_name }}" &&\
            sleep 5 &&\
            rm -f "{{ data.msr }}/.restart_{{ data.daemon_name }}"
    - onlyif: ls "{{ data.msr }}/.restart_{{ data.daemon_name }}"
    - require:
      - mc_proxy: dummy-pre-{{ data.daemon_name }}-service-restart

    - require_in:
      - dummy-post-{{ data.daemon_name }}-service-restart

salt-{{ data.daemon_name }}:
  service.running:
    - name: {{ data.daemon_name }}
    - enable: True
    - require:
      - mc_proxy: dummy-post-{{ data.name }}-service-restart
      - mc_proxy: dummy-post-{{ data.service_name }}-service-restart
{% endmacro %}

{#-
########################
# Install a salt master
########################
#}
{% macro install_master(mode='salt', data=None, service_name='master', full=True) %}
{% if not data -%}
{%- set data = data_mappings[service_name].get(
  mode,  data_mappings[service_name]['salt']) %}
{%- endif %}
{{ install_salt_common_daemon(adata=data, full=full) }}
{% set json_data = salt['mc_utils.json_dump'](data) %}

{% for cur_name in  [
  'roster',
] -%}
salt-{{ data.name }}-{{cur_name}}-bin:
  file.managed:
    - name: {{ data.conf_prefix }}/{{cur_name}}
    - source: salt://makina-states/files/etc/salt/{{cur_name}}
    - mode: 700
    - makedirs: True
    - template: jinja
    - salt_data: |
                 {{ json_data }}
    - require:
      - cmd: update-makinastates-{{ data.name }}
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
{% endfor %}

# specific vagrant vm settings
{% if 'devhost' in nodetypes_registry['actives'] -%}
salt-{{ data.daemon_name }}-conf-devhost-global:
  file.managed:
    - name: {{ data.conf_prefix }}/{{ data.service_name }}.d/10_devhost.conf
    - template: jinja
    - makedirs: true
    - source: salt://makina-states/files/etc/salt/{{ data.service_name }}.d/10_devhost.conf
    - salt_data: |
                 {{ json_data }}
    - require:
      - mc_proxy: dummy-{{data.name}}-layout
    - require_in:
      - mc_proxy: dummy-pre-{{ data.name }}-service-restart
{% endif %}
{% endmacro %}

{#
########################
# install a salt minion
########################
#}
{% macro install_minion(mode='salt', data=None, service_name='minion', full=True) %}
{% if not data %}
{%- set data = data_mappings[service_name].get(
  mode,  data_mappings[service_name]['salt']) %}
{%- endif %}
{{ install_salt_common_daemon(adata=data, full=full) }}
{% endmacro %}
# vim: set nofoldenable:
