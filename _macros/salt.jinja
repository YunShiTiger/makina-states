{#
#
# This file contains three macros to
# - install makina states
# - configure a salt master and a salt minion which uses this makina states root
# This  permit a really fined grain configuration at state & pillar level

#
# Three macros are exposed:
#   - install_makina_states: install the common saltstack stuff
#   - install_master: master specific bits
#   - install_minion: minion specific bits
#
# Think that mappings (dicts) or lists are differently handled on behalf
# of the underlying setting, please read the bellow mappings
# and the according managed configuration files to know how to set them
# to the correct value
#
# Common values must be updated in the common section, and the same for master or minion
#
# To override values in pillar:
#  salt:
#     common:
#       - prefix: /foobar
#     master:
#       - ret_port: 4706
#     minion:
#       - master_port: 4706
#
#  mastersalt:
#     common:
#       - prefix: /foobar/mastersalt
#     master:
#       - ret_port: 4506
#     minion:
#       - master_port: 4506
#
# Formulas & code management:
#
#   - We do not like formulas served with gitfs as it may not be resilient
#     to network problems and also consume more network resources.
#   - For thus, we do prior checkouts and then we have a local checkout
#     of the formula repository, and we then must link the inner formula
#     subfolder inside our salt states tree root.
#
# That's why you will maybe add to core repositories new formulaes by
# modyfing the confRepos keys as follow:
#
# salt:
#  common:
#   confRepos:
#     <id>:
#      name: git url of the repo
#      target: path on the filesystem
#      link: (optionnal and mainly useful for formulaes)
#        name: target path name on the fs
#        target: absolute path of the symlink
#
# salt:
#  common:
#   confRepos:
#     docker-formulae:
#       name: https://github.com/saltstack-formulas/docker-formula.git
#       target: '{salt_root}/formulas/docker'
#       link:
#         name: '{salt_root}/docker'
#         target: '{salt_root}/formulas/docker/docker'
#
#}
{% import "makina-states/_macros/nodetypes.jinja" as nodetypes with context %}

{% set nodetypes = nodetypes %}
{% set localsettings = nodetypes.localsettings %}
{% set locs = localsettings.locations %}

{% set resolver = salt['mc_utils.format_resolve'] %}

{% set group = localsettings.group %}
{% set groupId = localsettings.groupId %}

# You can overrides this dict via the salt pillar entry 'confRepos', see bellow
# external base repositories to checkout
# Add also here the formumlas to checkout
# and if neccesary the symlink to wire on the salt root tree
{% set confRepos = {
  'salt-git': {
    'name': 'http://github.com/makinacorpus/salt.git',
    'rev': 'develop',
    'target': '{salt_root}/makina-states/src/salt'},
  'SaltTesting-git': {
    'name': 'http://github.com/saltstack/salt-testing.git',
    'rev': 'develop',
    'target': '{salt_root}/makina-states/src/SaltTesting'},
  'm2crypto': {
    'name': 'https://github.com/makinacorpus/M2Crypto.git',
    'target': '{salt_root}/makina-states/src/m2crypto'},
  'salt-formulae': {
    'name': 'http://github.com/saltstack-formulas/salt-formula.git',
    'link': {'target': '{salt_root}/formulas/salt/salt',
             'name': '{salt_root}/salt'},
    'target': '{salt_root}/formulas/salt'},
  'openssh-formulae': {
    'name': 'http://github.com/saltstack-formulas/openssh-formula.git',
    'link': {'target': '{salt_root}/formulas/openssh/openssh',
             'name': '{salt_root}/openssh'},
    'target': '{salt_root}/formulas/openssh'},
  'openstack-formulae': {
    'name': 'https://github.com/kiorky/openstack-salt-states.git',
    'target': '{salt_root}/openstack'},
  'makina-states': {
    'name': 'https://github.com/makinacorpus/makina-states.git',
    'target': '{salt_root}/makina-states'},
} %}
{% for i, data in confRepos.items() %}
{%  for k in ['rev', 'target', 'name'] %}
{%    do data.update({
          'rev': salt['mc_utils.get']('makina-states.salt.'+i+'.rev',
                                      data.get('rev', False))}) %}
{%  endfor %}
{% endfor %}

{% set saltCommonData = {
  'confRepos': confRepos,
  'rotate': localsettings.rotate.days,
  'yaml_utf8': True,
  'root_dir': locs.root_dir,
  'conf_dir': locs.conf_dir,
  'bin_dir': locs.bin_dir,
  'bin_dir': locs.bin_dir,
  'upstart_dir': locs.upstart_dir,
  'var_prefix':  locs.var_dir,
  'initd_dir': locs.initd_dir,
  'pref_name': '',
  'name'   : '{pref_name}salt',
  'group': group,
  'groupId': groupId,
  'projects_root': '{prefix}/projects',
  'vagrant_root': '{prefix}/vagrant',
  'vms_docker_root': localsettings.locations['vms_docker_root'],
  'docker_root': localsettings.locations['docker_root'],
  'resetperms': 'file://{msr}/_scripts/reset-perms.sh',
  'init_d': '{initd_dir}',
  'prefix': locs['prefix'],
  'venv': locs['venv'],
  'salt_root': '{prefix}/{name}',
  'msr': '{salt_root}/makina-states',
  'pillar_root': '{prefix}/pillar',
  'conf_prefix': '{conf_dir}/{name}',
  'cache_prefix': '{var_prefix}/cache/{name}',
  'run_prefix': '{var_prefix}/run',
  'daemon_name': '{name}-{service_name}',
  'default_include': '{service_name}.d/*.conf',
  'cachedir': '{cache_prefix}/{daemon_name}',
  'pki_dir': '{conf_prefix}/pki/{service_name}',
  'pidfile': '{run_prefix}/{daemon_name}.pid',
  'sock_dir': '{run_prefix}/{name}/{service_name}',
  'log_prefix': '{var_prefix}/log/{name}',
  'log_file': '{log_prefix}/{daemon_name}',
  'key_logfile': '{log_prefix}/{daemon_name}-key',
  'log_level': 'warning',
  'log_level_logfile': 'info',
  'log_datefmt': "'%H:%M:%S'",
  'log_datefmt_logfile': "'%Y-%m-%d %H:%M:%S'",
  'log_fmt_console': "'[%(levelname)-8s] %(message)s'",
  'log_fmt_logfile': "'%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'",
  'verify_env': True,
  'loop_interval': '60',
  'user': 'root',
  'file_roots': {'base': ['{salt_root}']},
  'pillar_roots': {'base': ['{pillar_root}']},
  'include': [],
  'ipv6': False,
  'color': True,
  'open_mode': False,
  'permissive_pki_access': False,
  'state_output': 'full',
  'state_verbose': True,
  'state_top': 'top.sls',
  'cython_enable': False,
  'failhard': False,
  'log_granular_levels': {},
  'salt_modules': [
    '_grains',
    '_macros',
    '_modules',
    '_renderers',
    '_runners',
    '_returners',
    '_scripts',
    '_states',]
} %}

# default daemon overrides
{% set saltMinionData = salt['mc_utils.dictupdate'](saltCommonData.copy(), {
  'service_name': 'minion',
  'master': '127.0.0.1',
  'master_port': '4506',
  'retry_dns': '30',
  'id': None,
  'append_domain': False,
  'grains': {},
  'output': None,
  'cache_jobs': False,
  'disable_modules': [],
  'disable_returners': [],
  'minion': None,
  'backup_mode': '',
  'acceptance_wait_time': '10',
  'top_file': '""',
  'acceptance_wait_time_max': '0',
  'random_reauth_delay': '60',
  'recon_default': '100',
  'recon_max': '5000',
  'recon_randomize': False,
  'dns_check': True,
  'ipc_mode': 'ipc',
  'tcp_pub_port': '4510',
  'tcp_pull_port': '4511',
  'module_dirs': ['{salt_root}/_modules', '{salt_root}/makina-states/_modules'],
  'returner_dirs': ['{salt_root}/_returners',
                    '{salt_root}/makina-states/_returners'],
  'states_dirs': ['{salt_root}/_states', '{salt_root}/makina-states/_states'],
  'render_dirs': ['{salt_root}/_renderers', '{salt_root}/makina-states/_renderers'],
  'providers': {},
  'autoload_dynamic_modules': True,
  'clean_dynamic_modules': True,
  'environment': None,
  'startup_states': "''",
  'sls_list': '[]',
  '': "''",
  'file_client': 'remote',
  'master_finger': "''",
  'multiprocessing': True,
  'update_url': False,
  'update_restart_services': '[]',
  'tcp_keepalive': True,
  'tcp_keepalive_idle': '300',
  'tcp_keepalive_cnt': '-1',
  'tcp_keepalive_intvl': '-1',
  'win_repo_cachefile': 'salt://win/repo/winrepo.p',
}) %}

# default master settings
{% set saltMasterData = salt['mc_utils.dictupdate'](saltCommonData.copy(), {
  'runner_dirs': '[]',
  'service_name': 'master',
  'interface': '127.0.0.1',
  'publish_port': '4505',
  'ret_port': '4506',
  'max_open_files': '100000',
  'worker_threads': '5',
  'dev_worker_threads': '2',
  'keep_jobs': '744',
  'timeout': '120',
  'output': None,
  'job_cache': True,
  'minion_data_cache': True,
  'auto_accept': False,
  'autosign_file': '{conf_prefix}/autosign.conf',
  'client_acl_blacklist': {},
  'external_auth': {},
  'token_expire': '43200',
  'file_recv': False,
  'master_tops': {},
  'external_nodes': None,
  'renderer': 'yaml_jinja',
  'hash_type': 'md5',
  'file_buffer_size': '1048576',
  'file_ignore_regex': [],
  'runner_dirs': ['{salt_root}/_runners', '{salt_root}/makina-states/_runners'],
  'file_ignore_glob': [],
  'fileserver_backend':  ['roots', 'git'],
  'gitfs_remotes': '[]',
  'ext_pillar': {},
  'pillar_opts': True,
  'order_masters': True,
  'syndic_master': None,
  'syndic_master_port': '4506',
  'syndic_pidfile':  '{run_prefix}/{name}-syndic.pid',
  'syndic_log_file': '{log_prefix}/{name}-syndic',
  'peer': {},
  'peer_run': {},
  'nodegroups': {},
  'range_server': None,
  'win_repo': '{salt_root}/win/repo',
  'win_repo_mastercachefile': '{salt_root}/win/repo/winrepo.p',
  'win_gitrepos': [],
}) %}

# mastersalt daemon overrides
{% set mastersaltCommonData = salt['mc_utils.dictupdate'](
  saltCommonData.copy(), {'pref_name': 'master', 'pillar_root': locs.prefix+'/{name}-pillar'}) %}
{% set mastersaltMasterData = salt['mc_utils.dictupdate'](
   saltMasterData.copy(), mastersaltCommonData.copy()) %}
{% set mastersaltMinionData = salt['mc_utils.dictupdate'](
   saltMinionData.copy(), mastersaltCommonData.copy()) %}
{% set mastersaltMasterData = salt['mc_utils.dictupdate'](
  mastersaltMasterData, {
    'publish_port': '4605',
    'ret_port': '4606'}) %}
{% set mastersaltMinionData = salt['mc_utils.dictupdate'](
  mastersaltMinionData, {
    'master': '127.0.0.1',
    'master_port': '4606',
    'tcp_pub_port': '4610',
    'tcp_pull_port': '4611'}) %}

# common pillar overrides
{% set salt_pillar = pillar.get('salt', {}) %}
{% set saltCommonPillar = salt_pillar.get('common', {}) %}
{% set saltMasterPillar = salt_pillar.get('master', {}) %}
{% set saltMinionPillar = salt_pillar.get('minion', {}) %}
{% set mastersalt_pillar = pillar.get('mastersalt', {}) %}
{% set mastersaltCommonPillar = mastersalt_pillar.get('common', {}) %}
{% set mastersaltMasterPillar = mastersalt_pillar.get('master', {}) %}
{% set mastersaltMinionPillar = mastersalt_pillar.get('minion', {}) %}

# per daemon commpon section overrides
{% set saltMasterData = salt['mc_utils.dictupdate'](
  saltMasterData,  saltCommonPillar.copy()) %}
{% set saltMinionData = salt['mc_utils.dictupdate'](
  saltMinionData, saltCommonPillar.copy()) %}
{% set mastersaltMasterData = salt['mc_utils.dictupdate'](
  mastersaltMasterData, mastersaltCommonPillar.copy()) %}
{% set mastersaltMinionData = salt['mc_utils.dictupdate'](
  mastersaltMinionData, mastersaltCommonPillar.copy()) %}

# per daemon pillar overrides
{% set saltMasterData = salt['mc_utils.dictupdate'](
  saltMasterData,  saltMasterPillar.copy()) %}
{% set saltMinionData = salt['mc_utils.dictupdate'](
  saltMinionData, saltMinionPillar.copy()) %}

# per mastersalt daemon pillar overrides
{% set mastersaltMasterData = salt['mc_utils.dictupdate'](
  mastersaltMasterData, mastersaltMasterPillar.copy()) %}
{% set mastersaltMinionData = salt['mc_utils.dictupdate'](
  mastersaltMinionData, mastersaltMinionPillar.copy()) %}

########################################
# default exposed global variables
########################################
# SALT VARIABLES
{% set saltCommonData = resolver(saltCommonData) %}
{% set saltMasterData = resolver(saltMasterData) %}
{% set saltMinionData = resolver(saltMinionData) %}
{% set saltname = saltCommonData['name'] %}
{% set saltprefix = saltCommonData['prefix']%}
{% set prefix = saltprefix %}
{% set projectsRoot = saltCommonData['projects_root'] %}
{% set vagrantRoot = saltCommonData['vagrant_root'] %}
{% set dockerRoot = saltCommonData['docker_root'] %}
{% set saltroot = saltCommonData['salt_root'] %}
{% set saltRoot = saltroot %}
{% set confPrefix = saltCommonData['conf_prefix'] %}
{% set cachePrefix = saltCommonData['cache_prefix'] %}
{% set runPrefix = saltCommonData['run_prefix'] %}
{% set logPrefix = saltCommonData['log_prefix'] %}
{% set pillarRoot =  saltCommonData['pillar_root'] %}
{% set msr = saltroot + '/makina-states' %}
{% set resetperms = 'file://' + msr + '/_scripts/reset-perms.sh' %}
{% set saltbinpath = msr + '/bin' %}

# MASTERSALT VARIABLES
{% set mastersaltCommonData = resolver(mastersaltCommonData) %}
{% set mastersaltMasterData = resolver(mastersaltMasterData) %}
{% set mastersaltMinionData = resolver(mastersaltMinionData) %}
{% set msaltname = mastersaltCommonData['name'] %}
{% set msaltprefix = mastersaltCommonData['prefix']%}
{% set mprefix = msaltprefix %}
{% set mprojects_root = mastersaltCommonData['projects_root'] %}
{% set mvagrant_root = mastersaltCommonData['vagrant_root'] %}
{% set msaltroot = mastersaltCommonData['salt_root'] %}
{% set msaltRoot = msaltroot %}
{% set mconfPrefix = mastersaltCommonData['conf_prefix'] %}
{% set mcachePrefix = mastersaltCommonData['cache_prefix'] %}
{% set mrunPrefix = mastersaltCommonData['run_prefix'] %}
{% set mlogPrefix = mastersaltCommonData['log_prefix'] %}
{% set mpillarRoot =  mastersaltCommonData['pillar_root'] %}
{% set mmsr = msaltroot + '/makina-states' %}
{% set mresetperms = 'file://' + mmsr + '/_scripts/reset-perms.sh' %}
{% set msaltbinpath = mmsr + '/bin' %}

# mappings
{% set data_mappings = {
  'master': {
    'salt': saltMasterData,
    'mastersalt': mastersaltMasterData,
  },
  'minion': {
    'salt': saltMinionData,
    'mastersalt': mastersaltMinionData,
  }
} %}




###############################
# Common installation stuff
###############################
{% macro install_makina_states(mode='salt', adata=None) %}
{% if not adata %}
{% if mode=='salt'%}
{% set data = resolver(saltCommonData) %}
{% else %}
{% set data = resolver(mastersaltCommonData) %}
{% endif %}
{% else %}
{% set data = resolver(adata) %}
{% endif %}
{% set localRoot = resolver('{salt_root}', data) %}
{% set prefix = resolver('{prefix}', data) %}
{% set confPrefix = resolver('{conf_prefix}', data) %}
{% set cachePrefix = resolver('{cache_prefix}', data) %}
{% set cachedir = resolver('{cachedir}', data) %}
{% set runPrefix = resolver('{run_prefix}', data) %}
{% set logPrefix = resolver('{log_prefix}', data) %}
{% set pillarRoot = resolver('{pillar_root}', data) %}
{% set localMsr = resolver('{salt_root}/makina-states', data) %}
{% set yamled_data = resolver(data | yaml )%}
{% set repos = data['confRepos'] %}

{% for cur_name in  [
  'salt',
  'salt-call',
  'salt-cloud',
  'salt-cp',
  'salt-key',
  'salt-master',
  'salt-minion',
  'salt-run',
  'salt-ssh',
  'salt-syndic',
] %}
{% if cur_name == 'salt' %}
{% set src = 'salt' %}
{% else %}
{% set src = 'salt-wrapper' %}
{% endif %}
salt-{{ data.name }}-{{cur_name}}-bin:
  file.managed:
    - name: {{ data.bin_dir }}/{{ data.pref_name }}{{cur_name}}
    - source: salt://makina-states/files/usr/bin/{{ src }}
    - mode: 755
    - makedirs: True
    - template: jinja
    - salt_data: {{ yamled_data }}
    - bin_name: {{cur_name}}
    - require:
      - cmd: update-makinastates-{{ data.name }}
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart
{% endfor %}

salt-{{ data.name }}-{{ group }}:
  group.present:
    - name: {{ group }}
    - system: True
    {% if groupId %}- gid: {{ groupId }}{% endif %}

# this is really factored
# idea is to create dirs, then requires daemons to issue the chmod
# without restarting them, otherwise the watch function will
# restart them everytime !
salt-etc-{{ data.name }}-dirs:
  file.directory:
    - names:
      - {{ confPrefix }}
      - {{ confPrefix }}/master.d
      - {{ confPrefix }}/minion.d
    - user: root
    - group: {{ group }}
    - dir_mode: 0770
    - makedirs: True
    - require:
      - group: salt-{{ data.name }}-{{ group }}

etc-{{ data.name }}-dirs:
  file.directory:
    - names:
      - {{ localRoot }}
      - {{ localRoot }}/makina-projects
      - {{ pillarRoot }}
      - {{ prefix }}/projects
      {# - {{ prefix }}/vagrant #}
    - user: root
    - group: {{ group }}
    - file_mode: "0770"
    - dir_mode: "0770"
    - makedirs: True
    - require:
      - group: salt-{{ data.name }}-{{ group }}

# only here for orchestration purposes
dummy-pre-{{ data.name }}-service-restart:
  cmd.run:
    - name: /bin/true
    - unless: /bin/true
    - require:
      - cmd: update-makinastates-{{ data.name }}
      - file: salt-etc-{{ data.name }}-dirs
      - file: salt-{{ data.name }}-dirs-restricted
      - file: salt-{{ data.name }}-logrotate

dummy-post-{{ data.name }}-service-restart:
   cmd.run:
    - name: /bin/true
    - unless: /bin/true

dummy-pre-{{ data.name }}-checkouts:
  cmd.run:
    - name: /bin/true
    - unless: /bin/true

# Keep those 3 first following in sync with buildout mr.developer content
# those repos are the one needed to bootstrap the core daemons
{% for i, rdata in repos.items() -%}
{% set git = rdata['target']+'/.git'  -%}
{% set rev = rdata.get('rev', None) %}
{% set link = rdata.get('link', False) %}
salt-{{ data.name }}-{{ i }}:
# on next runs as we reset perms on repos, just set filemode=false
# do not use cwd as if dir does not exist, if will fail the entire state
# For formulas, also create the symlink if neccesary
  cmd.run:
    - name: cd "{{ rdata['target'] }}" && git config --local core.filemode false
    - require:
      - cmd: dummy-pre-{{ data.name }}-checkouts
    - onlyif: ls -d "{{ git }}"
    - unless: if [[ -d "{{ git }}" ]];then cd "{{ rdata['target'] }}" && grep -q "filemode = false" .git/config;fi
# on each run, update the code
  mc_git.latest:
    - name: {{ rdata['name'] }}
    - target: {{ rdata['target'] }}
    {% if rev %}
    - rev: {{ rev }}
    {% endif %}
    - require:
      - cmd: salt-{{ data.name }}-{{ i }}
  {% if link %}
  file.symlink:
    - target:  {{link.target}}
    - name:  {{link.name}}
    - require:
      - mc_git: salt-{{ data.name }}-{{ i }}
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart
  {% endif %}
{% endfor %}

salt-{{ data.name }}-makina-states-dirs:
  file.directory:
    - names:
      {% for i in data.salt_modules -%}
      - {{ localRoot }}/{{ i }}
      - {{ data.msr }}/{{ i }}
      {% endfor %}

# update makina-state
salt-{{ data.name }}-buildout-bootstrap:
  cmd.run:
    - name: |
            py="python";
            if [ -e "{{ data.venv }}/bin/python" ];then
              py="{{ data.venv }}/bin/python";
            fi;
            $py bootstrap.py
    - cwd: {{ data.msr }}
    - unless: test "$(cat buildout.cfg|md5sum|awk '{print $1}')" = "$(cat .saltchk)"
    - require_in:
      - cmd: update-makinastates-{{ data.name }}
    - require:
      - mc_git: salt-{{ data.name }}-makina-states

update-makinastates-{{ data.name }}:
  cmd.run:
    - name: |
            bin/buildout &&\
            cat buildout.cfg|md5sum|awk '{print $1}'>.saltchk &&\
            touch "{{ data.msr }}/.restart_salt" &&\
            touch "{{ data.msr }}/.restart_msalt" &&\
            touch "{{ data.msr }}/.restart_salt_minion" &&\
            touch "{{ data.msr }}/.restart_msalt_minion"
    - cwd: {{ data.msr }}
    - unless: test "$(cat buildout.cfg|md5sum|awk '{print $1}')" = "$(cat .saltchk)"

salt-{{ data.name }}-dirs-restricted:
  file.directory:
    - names:
      - {{ data.log_prefix }}
      - {{ data.run_prefix }}/{{ data.name }}
      - {{ data.cache_prefix }}
      - {{ data.conf_prefix }}/pki
    - msr: {{ data.msr }}
    - user: root
    - group: {{ group }}
    - file_mode: 0750
    - dir_mode: 2750
    - makedirs: True
    - require:
      - file: salt-{{ data.name }}-makina-states-dirs

# update makina-state
salt-{{ data.name }}-logrotate:
  file.managed:
    - template: jinja
    - name: {{ locs.conf_dir }}/logrotate.d/{{ data.name }}.conf
    - source: salt://makina-states/files/etc/logrotate.d/salt.conf
    - salt_data: {{ yamled_data }}

salt-{{ data.name }}-reload-grains:
  cmd.script:
    - source: salt://makina-states/_scripts/reload_grains.sh
    - template: jinja

salt-{{ data.name }}-net.core.rmem__wmem_max:
  sysctl.present:
    - names:
      - net.core.rmem_max
      - net.core.wmem_max
    - value: 16777216
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.name }}-net.ipv4.tcp_rmem__wmem:
  sysctl.present:
    - names:
      - net.ipv4.tcp_rmem
      - net.ipv4.tcp_wmem
    - value: 4096 87380 16777216
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

# Fix permissions and ownerships
# recurse does not seem to work well to reset perms
etc-{{data.name}}-dirs-perms:
  cmd.script:
    - source:  {{data.resetperms }}
    - template: jinja
    - msr: {{ msr }}
    - dmode: 0770
    - fmode: 0770
    - user: "root"
    - group: "{{ localsettings.group }}"
    - reset_paths:
      - {{ data.conf_prefix }}
    - require:
      - file: salt-etc-{{data.name}}-dirs
      - cmd: dummy-pre-{{data.name}}-service-restart

# recurse does not seem to work well to reset perms
{{data.name}}-projects-dirs-perms:
  cmd.script:
    - source: {{ data.resetperms }}
    - template: jinja
    - dmode: 0770
    - fmode: 0770
    - only_acls: True
    - msr: {{ data.msr }}
    - user: "root"
    - group: "{{ localsettings.group }}"
    - reset_paths:
      - {{ data.projects_root }}
      {# - {{ data.vagrant_root }} #}
    - require:
      - cmd: dummy-pre-{{data.name}}-service-restart
      - cmd: etc-{{data.name}}-dirs-perms

{{data.name}}-dirs-perms:
  cmd.script:
    - source: {{ data.resetperms }}
    - template: jinja
    - dmode: 0770
    - fmode: 0770
    - msr: {{ data.msr }}
    - user: "root"
    - group: "{{ localsettings.group }}"
    - reset_paths:
      - {{ data.salt_root }}
      - {{ data.pillar_root }}
    - require:
      - cmd: dummy-pre-{{data.name}}-service-restart
      - cmd: etc-{{data.name}}-dirs-perms
      - cmd: {{data.name}}-projects-dirs-perms

{{data.name}}-dirs-restricted-perms:
  cmd.script:
    - source: {{ resetperms }}
    - template: jinja
    - fmode: 0750
    - msr: {{ msr }}
    - dmode: 0750
    - user: "root"
    - group: "{{ localsettings.group }}"
    - reset_paths:
      - {{ data.log_prefix }}
      - {{ data.run_prefix }}/{{data.name}}
      - {{ data.cache_prefix }}
      - {{ data.conf_prefix }}/pki
    - require:
      - cmd: {{data.name}}-dirs-perms
      - cmd: etc-{{data.name}}-dirs-perms
      - file: salt-{{data.name}}-dirs-restricted
      - cmd: dummy-pre-{{data.name}}-service-restart

{#
# recurse does not seem to work well to reset perms
{{data.name}}-docker-dirs-if-present:
  cmd.script:
    - onlif: ls -d {{data.prefix}}/docker/makinacorpus
    - source: {{ data.resetperms }}
    - template: jinja
    - reset_paths:
      - {{ data.vms_docker_root }}
    - msr: {{ data.msr }}
    - only_acls: True
    - dmode: 0770
    - fmode: 0770
    - user: "root"
    - group: {{ localsettings.group }}
    - require_in:
      - cmd: dummy-pre-{{data.name}}-service-restart
    - excludes:
      - {{ data.vms_docker_root }}/docker/bundles
      - {{ data.vms_docker_root }}/cache
      - {{ data.vms_docker_root }}/makinacorpus/debian/debootstrap
      - {{ data.vms_docker_root }}/makinacorpus/ubuntu_deboostrap/debootstrap
#}

{% endmacro %}

#
# SALT DAEMON MACRO
#
{% macro install_salt_common_daemon(adata) %}
{% set data = resolver(adata) %}
{% set localRoot = resolver('{salt_root}', data) %}
{% set prefix = resolver('{prefix}', data) %}
{% set confPrefix = resolver('{conf_prefix}', data) %}
{% set cachePrefix = resolver('{cache_prefix}', data) %}
{% set cachedir = resolver('{cachedir}', data) %}
{% set runPrefix = resolver('{run_prefix}', data) %}
{% set logPrefix = resolver('{log_prefix}', data) %}
{% set pillarRoot = resolver('{pillar_root}', data) %}
{% set localMsr = resolver('{salt_root}/makina-states', data) %}
{% set yamled_data = data | yaml %}
salt-{{ data.daemon_name }}-conf-global:
  file.managed:
    - name: {{ confPrefix }}/{{ data.service_name }}.d/00_global.conf
    - template: jinja
    - makedirs: true
    - source: salt://makina-states/files/etc/salt/{{ data.service_name }}.d/00_global.conf
    - salt_data: {{ yamled_data }}
    - require:
      - file: salt-etc-{{ data.name }}-dirs
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-conf:
  file.managed:
    - name: {{ confPrefix }}/{{ data.service_name }}
    - template: jinja
    - source: salt://makina-states/files/etc/salt/{{ data.service_name }}
    - salt_data: {{ yamled_data }}
    - require:
      - file: salt-etc-{{ data.name }}-dirs
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

{% if grains['os'] == 'Debian' %}
salt-{{ data.daemon_name }}-job:
  file.managed:
    - name: {{ data['initd_dir'] }}/{{ data.daemon_name }}
    - template: jinja
    - source:  salt://makina-states/files/etc/init.d/salt-{{ data.service_name }}
    - mode: 755
    - root: {{ data.msr }}
    - saltname: {{ data.name }}
    - saltconfig: {{ confPrefix }}
    - salt_data: {{ yamled_data }}
    - require:
      - file: salt-etc-{{ data.name }}-dirs
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart
{% endif %}

{% if grains['os'] == 'Ubuntu' %}
salt-{{ data.daemon_name }}-job:
  file.managed:
    - name: {{ data.upstart_dir }}/{{ data.daemon_name }}.conf
    - template: jinja
    - source:  salt://makina-states/files/etc/init/salt-{{ data.service_name }}.conf
    - salt_data: {{ yamled_data }}
    - root: {{ data.msr }}
    - saltconfig: {{ confPrefix }}
    - saltname: {{ data.name }}
    - salt_data: {{ yamled_data }}
    - require:
      - file: salt-etc-{{ data.name }}-dirs
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart
{% endif %}

salt-{{ data.daemon_name }}-cache:
  file.directory:
    - name: {{ cachedir }}
    - makedirs: True
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-pki:
  file.directory:
    - name: {{ confPrefix }}/pki/{{ data.service_name }}
    - makedirs: True
    - require:
      - file: salt-etc-{{ data.name }}-dirs
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-sock-dir:
  file.directory:
    - name: {{ runPrefix }}/{{data.name}}/{{ data.service_name }}
    - makedirs: True
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

salt-{{ data.daemon_name }}-logs:
  file.managed:
    - salt_data: {{ yamled_data }}
    - names:
      - {{ logPrefix }}/key
      - {{ logPrefix }}/{{ data.daemon_name }}
      - {{ logPrefix }}/syndic.log
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart

# salt master/minion state will attach to this for the minion to be configured
# before being really restarted
dummy-pre-{{ data.service_name }}-service-restart:
  cmd.run:
    - name: /bin/true
    - unless: /bin/true
    - require:
      - cmd: dummy-pre-{{ data.name }}-service-restart
      {# deactivated for now, seems useless with recent salt fixes toward
         restarts
      {%- if data.service_name == 'minion' %}
      - cmd: dummy-post-{{ data.name }}-master-service-restart
      {%- endif %}
      #}

dummy-pre-{{ data.daemon_name }}-service-restart:
  cmd.run:
    - name: /bin/true
    - unless: /bin/true
    - require:
      - file: salt-{{ data.daemon_name }}-conf
      - file: salt-{{ data.daemon_name }}-job
      - file: salt-{{ data.daemon_name }}-conf

# done to mitigate authentication errors on restart
salt-restart-{{ data.daemon_name }}:
  cmd.run:
    - name: |
            service {{ data.daemon_name }} stop ;\
            service {{ data.daemon_name }} start &&\
            echo "Reloading {{ data.daemon_name }}" &&\
            sleep 5 &&\
            rm -f "{{ data.msr }}/.restart_{{ data.daemon_name }}"
    - onlyif: ls "{{ data.msr }}/.restart_{{ data.daemon_name }}"
    - require:
      - cmd: dummy-pre-{{ data.daemon_name }}-service-restart

dummy-post-{{ data.daemon_name }}-service-restart:
   cmd.run:
    - name: /bin/true
    - unless: /bin/true
    - require_in:
      - cmd: dummy-post-{{ data.name }}-service-restart
    - require:
      - cmd: salt-restart-{{ data.daemon_name }}

dummy-post-{{ data.service_name }}-service-restart:
   cmd.run:
    - name: /bin/true
    - unless: /bin/true
    - require:
      - cmd: dummy-post-{{ data.daemon_name }}-service-restart

salt-{{ data.daemon_name }}:
  service.running:
    - name: {{ data.daemon_name }}
    - enable: True
    - require:
      - cmd: dummy-post-{{ data.name }}-service-restart
      - cmd: dummy-post-{{ data.service_name }}-service-restart

{% endmacro %}


########################
# Install a salt master
########################
{% macro install_master(mode='salt', data=None, service_name='master') %}
{% if not data %}
{% set data = data_mappings[service_name].get(
  mode,  data_mappings[service_name]['salt']) %}
{% endif %}
{{ install_salt_common_daemon(adata=data) }}

# specific vagrant vm settings
{% if 'devhost' in nodetypes.registry['actives'] %}
salt-{{ data.daemon_name }}-conf-devhost-global:
  file.managed:
    - name: {{ data.conf_prefix }}/{{ data.service_name }}.d/10_devhost.conf
    - template: jinja
    - makedirs: true
    - source: salt://makina-states/files/etc/salt/{{ data.service_name }}.d/10_devhost.conf
    - salt_data: {{ data | yaml }}
    - require:
      - file: salt-etc-{{ data.name }}-dirs
    - require_in:
      - cmd: dummy-pre-{{ data.name }}-service-restart
{% endif %}

{% endmacro %}


########################
# install a salt minion
########################
{% macro install_minion(mode='salt', data=None, service_name='minion') %}
{% if not data %}
{% set data = data_mappings[service_name].get(
  mode,  data_mappings[service_name]['salt']) %}
{% endif %}
{{ install_salt_common_daemon(adata=data) }}
{% endmacro %}
# vim: set nofoldenable:
