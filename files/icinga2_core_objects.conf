#
# HOSTGROUP
#
HG_ALL_HOSTS: {}

#
# NOTIFICATIONCOMMANDS
#
N_service-notify-by-email:
  attrs:
    arguments:
      '$CONTACTEMAIL$': {}
      '%b': '
            ***** Supervision *****\n\nType de Notification:\n
            $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\n
            Statut: $SERVICESTATE$\n
            Host: $HOSTALIAS$ /  $HOSTNAME$\n
            Addresse IP: $HOSTADDRESS$\n
            Date/H: $DATE$ $TIME$\n
            Informations:\n
            --------------\n
            $SERVICEOUTPUT$\n'
      '-s': '** $SERVICESTATE$ : $SERVICEDESC$ on $HOSTALIAS$ - $NOTIFICATIONTYPE$ alert **'
      '|': '/usr/bin/mail'
    command: /usr/bin/printf
    import: ['plugin-notification-command']
N_host-notify-by-email:
  attrs:
    arguments:
      '$CONTACTEMAIL$': {}
      '%b': '
            ***** Supervision *****\n
            \n
            Type:$NOTIFICATIONTYPE$\n
            Host: $HOSTALIAS$ / $HOSTNAME$\n
            Statut: $HOSTSTATE$\n
            IP: $HOSTADDRESS$\n
            Info: $HOSTOUTPUT$\n
            \n
            Date/H: $DATE$ $TIME$'
      '-s': 'Alert Host $HOSTSTATE$ -> $HOSTNAME$!'
      '|': '/usr/bin/mail'
    command: '/usr/bin/printf'
    import: ['plugin-notification-command']
N_host-notify-by-irc:
  attrs:
    arguments:
      '%b': 'Nagios: $NOTIFICATIONTYPE$ Host $HOSTSTATE$ pour $HOSTNAME$\n$HOSTADDRESS$/$HOSTALIAS\n$HOSTOUTPUT$\n'
      '&': {}
      '>': /usr/local/nagios/ircbot/ircbotpipe
    command: /usr/bin/printf
    import: [plugin-notification-command]
N_service-notify-by-irc:
  attrs:
    arguments:
      '%b': 'Nagios: $NOTIFICATIONTYPE$ $SERVICESTATE$ $SERVICEDESC$\nsur $HOSTNAME$/$HOSTALIAS$/$HOSTADDRESS$\n$SERVICEOUTPUT$\n'
      '&': {}
      '>': /usr/local/nagios/ircbot/ircbotpipe
    command: /usr/bin/printf
    import: [plugin-notification-command]


# BASE COMMAND
# each constant in constants.conf will be added here
# as a custom variable
C_BASE:
  attrs:
    import: [plugin-check-command]
    vars.HOSTADDRESS: "$host.address$"
    vars.SNMP_PORT: "161"
    vars.SNMP_HOST: "$host.address$"
    vars.SSH_PORT: "22"
    vars.SSH_HOST: "$host.address$"
#
# SUBMITS CHECK COMMANDS
#
C_submit-host-check-result:
  attrs:
    import: [C_BASE]
    arguments:
      $HOSTNAME$: {}
      $HOSTOUTPUT$: {}
      $HOSTSTATE$: {}
    command: "PluginDir + \"/submit_host_check_result\""
C_submit-service-check-result:
  attrs:
    arguments:
      $HOSTNAME$: {}
      $SERVICEDESC$: {}
      $SERVICEOUTPUT$: {}
      $SERVICESTATE$: {}
    command: "PluginDir + \"/submit_service_check_result\""
    import: [C_BASE]
C_process-service-perfdata:
  attrs:
    arguments:
      $HOSTNAME$: {}
      $LASTSERVICECHECK$: {}
      $LASTSERVICESTATE$: {}
      $SERVICEDESC$: {}
      $SERVICEPERFDATA$: {}
      $SERVICESTATE$: {}
    command: "PluginDir + \"/C_process-service-perfdata\""
    import: [C_BASE]

#
# TIMEPERIODS
#
T_24x7:
  attrs:
    import: [legacy-timeperiod]
    ranges: {friday: '00:00-24:00', monday: '00:00-24:00', saturday: '00:00-24:00',
      sunday: '00:00-24:00', thursday: '00:00-24:00', tuesday: '00:00-24:00', wednesday: '00:00-24:00'}
T_workhours:
  attrs:
    import: [legacy-timeperiod]
    ranges: {friday: '09:00-17:00', monday: '09:00-17:00', thursday: '09:00-17:00',
      tuesday: '09:00-17:00', wednesday: '09:00-17:00'}
T_begin_day:
  attrs:
    import: [legacy-timeperiod]
    ranges: {friday: '00:00-24:00', monday: '00:00-24:00', saturday: '00:00-24:00',
      sunday: '00:00-24:00', thursday: '00:00-24:00', tuesday: '00:00-24:00', wednesday: '00:00-24:00'}
T_end_day:
  attrs:
    import: [legacy-timeperiod]
    ranges: {friday: '00:00-24:00', monday: '00:00-24:00', saturday: '00:00-24:00',
             sunday: '00:00-24:00', thursday: '00:00-24:00', tuesday: '00:00-24:00', wednesday: '00:00-24:00'}


# CHECK COMMANDS
C_ALWAYS_UP:
  attrs:
    import: [C_BASE]
    arguments: {-o: 'PING Not Allowed, always OK', -s: '0'}
    command: "PluginDir + \"/check_centreon_dummy\""
check_disk_smb:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: $ARG5$, -p: $ARG3$, -s: $ARG1$, -u: $ARG2$,
      -w: $ARG4$}
    command: "PluginDir + \"/check_disk_smb\""
    import: [C_BASE]
check_distant_disk_space:
  attrs:
    arguments: {-C: $ARG1$, -H: $HOSTADDRESS$, -c: $ARG4$, -p: $ARG2$, -w: $ARG3$}
    command: "PluginDir + \"/check_distant_disk_space\""
    import: [C_BASE]
check_host_alive:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: '5000.0,100%', -p: '1', -w: '3000.0,80%'}
    command: "PluginDir + \"/check_ping\""
    import: [C_BASE]
check_hpjd:
  attrs:
    arguments: {-C: public, -H: $HOSTADDRESS$}
    command: "PluginDir + \"/check_hpjd\""
    import: [C_BASE]
check_http_vhost_uri:
  attrs:
    arguments: {-H: $hostname$, -u: $url$}
    command: "PluginDir + \"/check_http\""
    import: [C_BASE]
check_tcp:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: $critical$, -p: $port$, -w: $warning$}
    command: "PluginDir + \"/check_tcp\""
    import: [C_BASE]
check_udp:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -p: $ARG1$}
    command: "PluginDir + \"/check_udp\""
    import: [C_BASE]
check_https:
  attrs:
    arguments: {-S: $HOSTADDRESS$}
    command: "PluginDir + \"/check_http\""
    import: [C_BASE]
CSSH:
  attrs:
    arguments:
      --skip-stderr: {}
      -C: $command$
      -H: $SSH_HOST$
      -p: $SSH_PORT$
      -i: $SSHKEY$
      -l: root
      -q: {}
    command: "PluginDir + \"/check_by_ssh\""
    import: [C_BASE]
C_APACHE_STATUS:
  attrs:
    arguments:
      $other_args$: {}
      -H: $HOSTADDRESS$
      -c: $critical$
      -t: '8'
      -w: $warning$
    command: "PluginDir + \"/check_apachestatus_auto.pl\""
    import: [C_BASE]
C_CHECK_NGINX_STATUS:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: $ARG4$, -s: $ARG2$, -t: '8', -u: $ARG1$,
      -w: $ARG3$}
    command: "PluginDir + \"/check_nginx_status.pl\""
    import: [C_BASE]
C_CHECK_ONE_NAGIOS_ONLY:
  attrs:
    arguments: {}
    command: "PluginDir + \"/check_one_nagios\""
    import: [C_BASE]
C_CHECK_PHPFPM:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: $ARG4$, -s: $ARG2$, -t: '8', -u: $ARG1$,
      -w: $ARG3$}
    command: "PluginDir + \"/check_phpfpm_status.pl\""
    import: [C_BASE]
C_DNS_EXTERNE_ASSOCIATION:
  attrs:
    arguments:
      -H: $hostname$
      -c: '500'
      -a: $HOSTADDRESS$
      -t: '8'
      -w: '50'
    command: "PluginDir + \"/check_dns\""
    import: [C_BASE]
C_HTTP:
  attrs:
    import: [C_BASE]
    command: "PluginDir + \"/check_http\""
C_HTTPS_OPENID_REDIRECT:
  attrs:
    import: [C_HTTP]
    arguments:
      --critical: $critical$
      --timeout: $timeout$
      --useragent: supervision
      --warning: $warning$
      -H: $hostname$
      -I: $HOSTADDRESS$
      -S: {}
      -e: HTTP/1.1 302 Found
      -s: https://openid.makina-corpus.net/login/login.php
      -u: $url$
C_HTTPS_STRING_ONLY:
  attrs:
    import: [C_HTTP]
    arguments:
      $strings$: {}
      --onredirect: follow
      --ssl: {}
      --timeout: $critical$
      --useragent: supervision
      -H: $hostname$
      -I: $HOSTADDRESS$
      -s: $timeout$
      -u: $url$
C_HTTP_STRING:
  attrs:
    import: [C_HTTP]
    arguments:
      $other_args$: {}
      --critical: $critical$
      --onredirect: follow
      --timeout: $timeout$
      --useragent: supervision
      --warning: $warning$
      -H: $hostname$
      -I: $HOSTADDRESS$
      -s: $strings$
      -u: $url$
C_HTTP_STRING_AUTH:
  attrs:
    import: [C_HTTP]
    arguments:
      $other_args$: {}
      --critical: $critical$
      --onredirect: follow
      --ssl: {}
      --timeout: $timeout$
      --useragent: supervision
      --warning: $warning$
      -H: $hostname$
      -I: $HOSTADDRESS$
      -a: $TEST_AUTHPAIR$
      -s: $strings$
      -u: $url$
C_HTTP_STRING_ONLY:
  attrs:
    import: [C_HTTP]
    arguments:
      $strings$: {}
      --onredirect: follow
      --timeout: $critical$
      --useragent: supervision
      -H: $hostname$
      -I: $HOSTADDRESS$
      -s: $timeout$
      -u: $url$
C_HTTP_STRING_SOLR:
  attrs:
    import: [C_HTTP]
    arguments:
      $ARG8$: {}
      --critical: $timeout$
      --onredirect: follow
      --timeout: $strings$
      --useragent: supervision
      --warning: $critical$
      -H: $hostname$
      -I: $HOSTADDRESS$
      -p: $port$
      -s: $other_args$
      -u: $warning$
C_HTTP_STRING_ZOPE:
  attrs:
    import: [C_HTTP]
    arguments:
      $ARG8$: {}
      --critical: $ARG5$
      --onredirect: follow
      --timeout: $ARG6$
      --useragent: supervision
      --warning: $ARG4$
      -H: $ARG1$
      -I: $HOSTADDRESS$
      -p: $ARG2$
      -s: $ARG7$
      -u: $ARG3$
C_MAIL_IMAP:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: $critical$, -w: $warning$}
    command: "PluginDir + \"/check_imap\""
    import: [C_BASE]
C_MAIL_IMAP_SSL:
  attrs:
    arguments:
      --ssl: {}
      -H: $HOSTADDRESS$
      -c: $critical$
      -p: '993'
      -w: $warning$
    command: "PluginDir + \"/check_imap\""
    import: [C_BASE]
C_MAIL_POP:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: $critical$, -w: $warning$}
    command: "PluginDir + \"/check_pop\""
    import: [C_BASE]
C_MAIL_POP_SSL:
  attrs:
    arguments:
      --ssl: {}
      -H: $HOSTADDRESS$
      -c: $critical$
      -p: '995'
      -w: $warning$
    command: "PluginDir + \"/check_pop\""
    import: [C_BASE]
C_MAIL_SMTP:
  attrs:
    arguments: {-C: ., -H: $HOSTADDRESS$, -R: '250 2.0.0 Ok: queued', -c: $critical$,
      -e: 220 mail.makina-corpus.com ESMTP Postfix (BlueMind), -f: $TESTUSER$@makina-corpus.com,
      -w: $warning$}
    command: "PluginDir + \"/check_smtp\""
    import: [C_BASE]
C_PING:
  attrs:
    arguments:
      -H: $HOSTADDRESS$
      -w: '3000.0,80%'
      -c: '5000.0,100%'
      -p: '1'
    command: "PluginDir + \"/check_ping\""
    import: [C_BASE]
C_POP3_TEST_SIZE_AND_DELETE:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -c: '$critical1$,$critical2$', -d: '25', -p: $TESTPWD$,
      -t: '10', -u: $TESTUSER$$mx$, -w: '$warning1$,$warning2$'}
    command: "PluginDir + \"/check_pop3_cleaner.py\""
    import: [C_BASE]
C_PROCESS_IRCBOT_RUNNING:
  attrs:
    arguments: {--command: ircbot.py, -c: '1:', -w: '1:'}
    command: "PluginDir + \"/check_procs\""
    import: [C_BASE]
C_SNMP_DISK:
  attrs:
    arguments:
      -H: '$SNMP_HOST$'
      -P: '$SNMP_PORT$'
      -u: $SNMP_USER$
      --snmp-version: 3
      --privpassword: "$SNMP_CRYPT$"
      -p: "$SNMP_PASS$"
      --authprotocol: SHA
      --privprotocol: des
      -c: $critical$
      -w: $warning$
      -d: $path$
      -n: {}
    command: "CUSTM_ADM_SCRIPTS + \"/centreon_plugins/check_centreon_snmp_remote_storage\""
    import: [C_BASE]
C_SNMP_LOADAVG:
  attrs:
    arguments:
      $other_args$: {}
      -H: $HOSTADDRESS$
      -P: $SNMP_PORT$
      -l: $SNMP_USER$
      -x: $SNMP_PASS$
      -X: $SNMP_CRYPT$
      -L: $SNMP_AUTH$,$SNMP_PRIV$
      -T: netsl
      -c: 50,50,50
      -w: 30,15,8
    command: "CUSTM_ADM_SCRIPTS + \"/check_snmp_load.pl\""
    import: [C_BASE]
C_SNMP_MEMORY:
  attrs:
    arguments:
      -H: $HOSTADDRESS$
      -p: $SNMP_PORT$
      -l: $SNMP_USER$
      -x: $SNMP_PASS$
      -X: $SNMP_CRYPT$
      -L: $SNMP_AUTH$,$SNMP_PRIV$
      -c: $critical$
      -w: $warning$
    command: "CUSTM_ADM_SCRIPTS + \"/check_snmp_mem.pl\""
    import: [C_BASE]
C_SNMP_NETWORK:
  attrs:
    arguments:
      $other_args$: {}
      -H: $HOSTADDRESS$
      -P: '$SNMP_PORT$'
      -a: '5'
      -i: $interface$
      -n: {}
      -p: $SNMP_PASS$
      -u: $SNMP_USER$
      -v: '3'
      -x: sha
      -y: $SNMP_CRYPT$
      -z: des
    command: "PluginDir + \"/check_centreon_snmp_traffic2\""
    import: [C_BASE]
C_SNMP_PROCESS:
  attrs:
    arguments:
      -F: {}
      -H: $HOSTADDRESS$
      -L: sha,des
      -X: $SNMP_CRYPT$
      -c: $critical$
      -l: $SNMP_USER$
      -n: $process$
      -w: $warning$
      -x: $SNMP_PASS$
    command: "PluginDir + \"/check_snmp_process.pl\""
    import: [C_BASE]
C_SNMP_PROCESS_COMPLETE:
  attrs:
    arguments:
      --memory: $ARG4$
      -F: {}
      -H: $HOSTADDRESS$
      -L: sha,des
      -X: $SNMP_CRYPT$
      -a: {}
      -c: $ARG3$
      -d: '300'
      -l: $SNMP_USER$
      -n: $ARG1$
      -u: $ARG5$
      -w: $ARG2$
      -x: $SNMP_PASS$
    command: "PluginDir + \"/check_snmp_process.pl\""
    import: [C_BASE]
C_SNMP_PROCESS_WITH_MEM:
  attrs:
    arguments:
      --memory: $memory$
      -F: {}
      -H: $HOSTADDRESS$
      -L: sha,des
      -X: $SNMP_CRYPT$
      -x: $SNMP_PASS$
      -c: $critical$
      -l: $SNMP_USER$
      -n: $process$
      -w: $warning$
    command: "PluginDir + \"/check_snmp_process.pl\""
    import: [C_BASE]
C_VERIFY_TCP_PORT:
  attrs:
    arguments: {-H: $HOSTADDRESS$, -p: $ARG1$}
    command: "PluginDir + \"/check_tcp\""
    import: [C_BASE]
EV_SSH_RELANCE_NTP:
  attrs:
    arguments:
      $HOSTADDRESS$: {}
      $HOSTNAME$: {}
      $SERVICEATTEMPT$: {}
      $SERVICEDESC$: {}
      $SERVICESTATE$: {}
      $SERVICESTATETYPE$: {}
    command: "PluginDir + \"/eventhandlers/relance_ntp\""
    import: [C_BASE]


#
# HOSTS TEMPLATES
#
HT_BASE:
  attrs:
    check_command: check_host_alive
    check_period: T_24x7
    enable_active_checks: 1
    enable_notifications: 1
    enable_passive_checks: 1
    max_check_attempts: 5
    notification:
      command: N_host-notify-by-email
      notification_interval: 0m
      period: T_24x7
      states: [Down, OK]
      types: [Problem, Recovery]
      user_groups: [Supervisors]
  type: Host


#
# Users
#
U_IRC_Bot:
  type: User

#
# SERVICES TEMPLATES
#
ST_ROOT:
  attrs:
    check_interval: '5m'
    check_period: 'T_24x7'
    enable_active_checks: 1
    enable_notifications: 0
    enable_passive_checks: 1
    max_check_attempts: 3
    retry_interval: '1m'
    notification:
      command: N_service-notify-by-email
      notification_interval: '0m'
      user_groups: ['Supervisors']
      volatile: 0
  type: 'Service'
ST_ALERT:
  attrs:
    enable_notifications: 1
    import: [ST_ROOT]
    notification:
      command: N_service-notify-by-email
      notification_interval: 0m
      period: T_24x7
      states: [Warning, Unknown, Critical, OK]
      types: [Problem, Recovery]
      user_groups: [Supervisors]
ST_DAILY_ALERT:
  attrs:
    check_interval: 1440m
    import: [ST_ALERT]
    max_check_attempts: 3
    retry_interval: 60m
ST_DAILY_BEGIN_DAY:
  attrs:
    check_interval: 1440m
    check_period: T_24x7
    import: [ST_DAILY_ALERT]
    max_check_attempts: 3
    retry_interval: 60m
ST_DAILY_END-DAY:
  attrs:
    check_interval: 1440m
    check_period: T_end_day
    import: [ST_DAILY_ALERT]
    max_check_attempts: 3
    retry_interval: 60m
ST_DAILY_NOALERT:
  attrs:
    check_interval: 1440m
    import: [ST_ROOT]
    max_check_attempts: 5
    retry_interval: 60m
ST_BACKUP_BURP_AGE:
  attrs:
    import: [ST_DAILY_ALERT]
    check_command: CSSH
    check_interval: 360m
    max_check_attempts: 6
    retry_interval: 30m
    vars.command: '/usr/local/admin_scripts/nagios/check_burp_backup_age.py -H $HOSTNAME$ -d /data/burp -w $warning$ -c $critical$'
    vars.warning: '1800'
    vars.critical: '2400'
    vars.ssh_addr: backup.changeme.net
ST_APACHE_STATUS:
  attrs:
    import: ["ST_WEB_APACHE_STATUS"]
    check_command: "C_APACHE_STATUS"
    vars.warning: 4
    vars.critical: 2
    vars.other_args: ""
ST_DRBD:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: '/usr/local/admin_scripts/nagios/check_drbd -d  0,1'
    enable_notifications: 1
    check_command: "C_SNMP_PROCESS"
    vars.warning: 0
    vars.critical: 0
ST_PROCESS:
  attrs:
    import: ["ST_ALERT"]
    enable_notifications: 1
    check_command: "C_SNMP_PROCESS"
    vars.warning: 0
    vars.critical: 0
ST_SNMPD_MEMORY_CONTROL:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_SNMP_PROCESS_WITH_MEM"
    vars.process: "snmpd"
    vars.warning: "0,1"
    vars.critical: "0,1"
    vars.memory: "256,512"
ST_PROCESS_POSTGRESQL:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: postgres
ST_PROCESS_MYSQL:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: mysql
ST_PROCESS_FAIL2BAN:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: fail2ban-server
ST_PROCESS_EPMD:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: epmd
ST_PROCESS_BEAM:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: beam
ST_PROCESS_PYTHON:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: python
ST_PROCESS_SLAPD:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: slapd
ST_PROCESS_GUNICORN:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: gunicorn
ST_PROCESS_IRCBOT:
  attrs:
    import: ["ST_HOURLY_ALERT"]
    check_command: "C_PROCESS_IRCBOT_RUNNING"
ST_PING:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_PING"
ST_HAPROXY_STATS:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: "/usr/local/admin_scripts/nagios/check_haproxy_stats.pl -p web -w 80 -c 90"
ST_PROCESS_GUNICORN_DJANGO:
  attrs:
    import: ["ST_PROCESS"]
    vars.process: gunicorn_django
ST_APT:
  attrs:
    import: [ST_DAILY_NOALERT]
    check_command: CSSH
    vars.command: '/usr/local/admin_scripts/nagios/check_debian_packages --timeout 60'
ST_ULARGE_DISK_SPACE:
  attrs:
    check_command: C_SNMP_DISK
    import: [ST_HOURLY_ALERT]
    vars.critical: '98'
    vars.warning: '95'
ST_LARGE_DISK_SPACE:
  attrs:
    check_command: C_SNMP_DISK
    import: [ST_HOURLY_ALERT]
    vars.critical: '90'
    vars.warning: '96'
ST_DISK_SPACE:
  attrs:
    check_command: C_SNMP_DISK
    import: [ST_HOURLY_ALERT]
    vars.critical: '90'
    vars.warning: '80'
ST_DNS_REVERSE_ASSOCIATION:
  attrs:
    check_command: C_DNS_EXTERNE_ASSOCIATION
    import: [ST_DNS_ASSOCIATION]
ST_DNS_ASSOCIATION:
  attrs:
    check_command: C_DNS_EXTERNE_ASSOCIATION
    import: [ST_DAILY_ALERT]
    vars.other_args: ''
ST_DNS_ASSOCIATION_hostname:
  attrs:
    check_command: C_DNS_EXTERNE_ASSOCIATION
    enable_perfdata: 0
    import: [ST_DNS_ASSOCIATION]
    vars.other_args: ''
ST_DOUBLE_DAILY_ALERT:
  attrs:
    check_interval: 720m
    import: [ST_ALERT]
    max_check_attempts: 3
    retry_interval: 60m
ST_HOURLY:
  attrs:
    check_interval: 60m
    import: [ST_ROOT]
    max_check_attempts: 3
    retry_interval: 1m
ST_HOURLY_ALERT:
  attrs:
    check_interval: 60m
    import: [ST_ALERT]
    max_check_attempts: 3
    retry_interval: 1m
ST_LOAD_AVG:
  attrs:
    check_command: C_SNMP_LOADAVG
    import: [ST_ROOT]
    vars.other_args: ''
ST_DDOS:
  attrs:
    import: [ST_ALERT]
    check_command: "CSSH"
    vars.command: '/usr/local/admin_scripts/nagios/check_ddos.pl -w $warning$ -c$critical$'
    vars.warning: 50
    vars.critical: 60
ST_MEMORY:
  attrs:
    check_command: C_SNMP_MEMORY
    import: [ST_ALERT]
    vars.critical: '90,90'
    vars.warning: '80,80'
ST_POSTGRESQL_PORT:
  attrs:
    import: ["ST_ROOT"]
    check_command: "check_tcp"
    vars.port: 5432
    vars.warning: 2
    vars.critical: 8
ST_MEMORY_LARGE:
  attrs:
    check_command: C_SNMP_MEMORY
    import: [ST_ALERT]
    vars.critical: '99,99'
    vars.warning: '95,95'
ST_NTP_PEERS:
  attrs:
    import: ["ST_ROOT"]
    check_command: "CSSH"
    vars.command: '/usr/local/admin_scripts/nagios/check_ntp_peer -H $ARG1$ -w 1 -c 10 -j -1:100 -k -1:200 -W 4 -C 10'
ST_NTP_TIME:
  attrs:
    import: ["ST_ROOT"]
    check_command: "CSSH"
    vars.command: '/root/check_ntp_time -H 195.144.11.170 -w 60 -c 120'
ST_NETWORK:
  attrs:
    check_command: C_SNMP_NETWORK
    import: [ST_ROOT]
    vars.interface: eth0
    vars.other_args: ''
ST_REPEAT_ALERT:
  attrs:
    import: [ST_ALERT]
    notification:
      command: N_service-notify-by-email
      notification_interval: 60m
      period: T_24x7
      states: [Warning, Unknown, Critical, OK]
      types: [Problem, Recovery]
ST_SSH_PROC_CRON:
  attrs:
    check_command: CSSH
    vars.command: '/usr/local/admin_scripts/nagios/check_procs -w 1: -c 1: --command cron'
    import: [ST_HOURLY_ALERT]
ST_WEB_APACHE_STATUS:
  attrs:
    check_command: C_APACHE_STATUS
    import: [ST_ROOT]
    vars.critical: '2'
    vars.other_args: ''
    vars.warning: '4'
ST_MAIL_CYRUS_IMAP_CONNECTIONS:
  attrs:
    import: [ST_ALERT]
    check_command: CSSH
    vars.command: '/usr/local/admin_scripts/nagios/check_cyrus-imapd -w  $warning$ -c $critical$'
    vars.warning: 300
    vars.critical: 900
ST_MAIL_SERVER_QUEUES:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: '/usr/local/admin_scripts/nagios/check_postfix_mailqueue -w $warning$ -c $critical$'
    vars.warning: 50
    vars.critical: 100
ST_MAIL_POP3_TEST_ACCOUNT:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_POP3_TEST_SIZE_AND_DELETE"
    vars.warning1: 52488
    vars.critical1: 1048576
    vars.warning2: 100
    vars.critical2: 2000
    vars.mx: "@makina-corpus.com"
ST_MAIL_POP_SSL:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_MAIL_POP_SSL"
    vars.warning: 1
    vars.critical: 3
ST_MAIL_SMTP:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_MAIL_SMTP"
    vars.warning: 1
    vars.critical: 3
ST_MAIL_POP:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_MAIL_POP"
    vars.warning: 1
    vars.critical: 3
ST_MAIL_IMAP_SSL:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_MAIL_IMAP_SSL"
    vars.warning: 1
    vars.critical: 3
ST_MAIL_IMAP:
  attrs:
    import: ["ST_ALERT"]
    check_command: "C_MAIL_IMAP"
    vars.warning: 1
    vars.critical: 3
ST_SSH:
  attrs:
    import: ["ST_ROOT"]
    check_command: "check_tcp"
    vars.port: 22
    vars.warning: 1
    vars.critical: 4
ST_WARE_RAID:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: "/usr/local/admin_scripts/nagios/check_3ware_raid"
ST_SWAP:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: "\"/usr/local/admin_scripts/nagios/check_swap -w 80% -c 50%\""
ST_SUPERVISOR_STATUS:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: "/usr/local/admin_scripts/nagios/check_supervisorctl.sh $command$"
    vars.supervisor: "/usr/bin/supervisorctl"
ST_WEB_BASE:
  attrs:
    check_command: C_HTTP_STRING
    vars.critical: '5'
    vars.other_args: ''
    vars.strings: html
    vars.timeout: '8'
    vars.url: /
    vars.port: 80
    vars.warning: '2'
ST_WEB:
  attrs:
    import: [ST_ALERT, ST_WEB_BASE]
ST_WEB_NOALERT:
  attrs:
    import: [ST_ROOT, ST_WEB_BASE]
ST_SOLR:
  attrs:
    import: ["ST_WEB"]
    check_command: "C_HTTP_STRING_SOLR"
ST_WEB_OPENID:
  attrs:
    import: ["ST_WEB"]
    check_command: "C_HTTPS_OPENID_REDIRECT"
ST_MEGARAID_SAS:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: '/usr/local/admin_scripts/nagios/check_megaraid_sas'
ST_RAID:
  attrs:
    import: ["ST_ALERT"]
    check_command: "CSSH"
    vars.command: '/usr/local/admin_scripts/nagios/check_md_raid'
ST_SAS:
  attrs:
    import: ["ST_ROOT"]
    check_command: "CSSH"
    vars.command: "/usr/local/admin_scripts/check_nagios/check_sas2ircu/check_sas2ircu"

# vim: set ft=yaml:
