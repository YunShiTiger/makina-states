#
# MANAGED VIA SALT (DRUPAL)
#  
    # phpfpm/fastcgi
    # Here we catch the 'false' Location used to inexistent {{ extra.socket_name }}php5.external
    # and push it to the external FastCgi process via a socket
    # note: socket path is relative to FastCgiIpcDir
    # which is set in Main configuration /etc/apache2/mods-available/fastcgi.conf
    <IfModule mod_fastcgi.c>
        # all .php files will be pushed to a php5-fcgi handler
        AddHandler php5-fcgi .php

        #action module will let us run a cgi script based on handler php5-fcgi
        Action php5-fcgi /fcgi-bin/{{ extra.socket_name }}php5.external

        # and we add an Alias to the fcgi location
        Alias /fcgi-bin/{{ extra.socket_name }}php5.external /{{ extra.socket_name }}php5.external

        # now we catch this cgi script which in fact does not exists on filesystem
        # we catch it on the url (Location)
        <Location /fcgi-bin/{{ extra.socket_name }}php5.external>
            # here we prevent direct access to this Location url,
            # env=REDIRECT_STATUS will let us use this fcgi-bin url
            # only after an internal redirect (by Action upper)
            <IfVersion < 2.3>
                Order Deny,Allow
                Deny from All
                Allow from env=REDIRECT_STATUS
            </IfVersion>
            <IfVersion >= 2.3>
                Require env REDIRECT_STATUS
            </IfVersion>
        </Location>

      FastCgiExternalServer /{{ extra.socket_name }}php5.external -socket {{ socketName }} -appConnTimeout {{ appConnTimeout|int(15) }} -idle-timeout {{ idleTimeout|int(30) }}

    </IfModule>

    # Project directory
    <Directory />
        Options FollowSymLinks
        # No .htaccess checks
        AllowOverride None
        # Access denied!
        <IfVersion < 2.3>
            Order Deny,Allow
            Deny from All
        </IfVersion>
        <IfVersion >= 2.3>
            Require all denied
        </IfVersion>
        #.svn & .git directories must be avoided!!
        RedirectMatch 404 /\.svn(/|$)
        RedirectMatch 404 /\.git(/|$)
    </Directory>

    # Project Directory
    <Directory {{ document_root }}>
        <IfVersion < 2.3>
            Order allow,deny
            Allow from all
        </IfVersion>
        <IfVersion >= 2.3>
            Require all granted
        </IfVersion>

{% if allow_htaccess %}
        AllowOverride None
{% else %}
        AllowOverride All
{% endif %}

        # Follow symbolic links in this directory.
        Options +FollowSymLinks -Indexes -Multiviews

        # Set the default handler
        DirectoryIndex index.php

        # Customized error messages.
        ErrorDocument 404 /index.php

        # Various rewrite rules.
        <IfModule mod_rewrite.c>
            RewriteEngine on
                ######### START RULE 1##################################
                # cleanurl is activated so ALL urls
                # MUST be accessed on /toto/titi and MUSN'T be accessed on index.php?q=/toto/titi
                # main reason is that applying url rules (like restricting /admin access) is far easier
                # in the cleanurl form than in parameter form (check commented rule on QUERY_STRING
                # below as QUERY_STRING as no url decode done in Apache, see that it's harder)
                # WARNING: need to alter any 'q' parameter that could be present
                # on original QUERY_STRING (part after the ?), or something
                # like /toto?q=admin could become a q=toto&q=admin
                # which is finally a q=admin, so we do not restrict
                # this rule to index.php
                #########################################################
                # WARNING: must prevent real internal redirect of :
                # /toto/titi to q=/toto/titi (done in rule 2)
                # to be forbidden, so the rule apply only
                # if the rewriting process is starting
                RewriteCond %{ENV:REDIRECT_STATUS} ^$

                #detect non-blank QUERY_STRING (some parameters are present after the ?
                RewriteCond %{QUERY_STRING} . [NC]

                # simplier one: we prevent any query with a q= parameter
                RewriteCond %{QUERY_STRING} (^|&|%26|%20)(q|Q|%71|%51)(=|%3D). [NC]

                # 403 FORBIDDEN !
                RewriteRule .* - [F,L]
                ########## END RULE 1 ###################

                ########## START RULE 2 ###################
                # cleanurl handling
                # for things which aren't real files or dir then
                # take the given url and giv it to index.php?q=...
                ###########################################
                # all url that didn't match ALL previous rewriteCond are still there
                # squeeze real files or directories, if they really exists
                # then Drupal won't be called
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteCond %{REQUEST_FILENAME} !-d

                # do not handle the favicon with Drupal bootstrap
                RewriteCond %{REQUEST_URI} !=/favicon.ico

                # This one is needed in php-fpm mode to avoid infinite redirects
                RewriteCond %{REQUEST_FILENAME} !={{ document_root }}/fcgi-bin/{{ extra.socket_name }}php5.external
                # put everything still there to Drupal index.php
                # [L]= stop rewriting here for matching rules
                # [QSA]=Appends any query string created in the rewrite target
                # to any query string that was in the original request URL
                RewriteRule ^(.*)$ index.php?q=$1 [L,QSA]
                ########## END RULE 2 ###################

                ########## START RULE 3 ###################
                # deny direct access to php files which aren't
                # index.php or update.php or install.php or xmlrpc.php or cron.php
                # (like an injected phpinfo.php)
                ###########################################
                RewriteCond %{ENV:REDIRECT_STATUS} ^$
                RewriteCond %{REQUEST_FILENAME} -f
                RewriteCond %{REQUEST_FILENAME} .*\.php
                RewriteCond %{REQUEST_FILENAME} !({{ allowed_files|replace(".", "\.")  }})
                RewriteRule .* - [F,L]
                ########## END RULE 3 ###################
        </IfModule>

        # Protect files and directories from prying eyes.
        <FilesMatch "\.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$">
            <IfVersion < 2.3>
                Order deny,allow
                Deny from all
            </IfVersion>
            <IfVersion >= 2.3>
                Require all denied
            </IfVersion>
        </FilesMatch>

        # Make Drupal handle any 404 errors.
        ErrorDocument 404 /index.php
        # Force simple error message for requests for non-existent favicon.ico.
        <Files favicon.ico>
          # There is no end quote below, for compatibility with Apache 1.3.
          ErrorDocument 404 "The requested file favicon.ico was not found."
        </Files>

        # Requires mod_expires to be enabled.
        <IfModule mod_expires.c>
            # Enable expirations.
            ExpiresActive On
            # Cache all files for 2 weeks after access (A).
            ExpiresDefault A1209600
            <FilesMatch \.php$>
                # Do not allow PHP scripts to be cached unless they explicitly send cache
                # headers themselves. Otherwise all scripts would have to overwrite the
                # headers set by mod_expires if they want another caching behavior. This may
                # fail if an error occurs early in the bootstrap process, and it may cause
                # problems if a non-Drupal PHP file is installed in a subdirectory.
                ExpiresActive Off
            </FilesMatch>
        </IfModule>

        # Rules to correctly serve gzip compressed CSS and JS files.
        # Requires both mod_rewrite and mod_headers to be enabled.
        <IfModule mod_headers.c>
            # Serve gzip compressed CSS files if they exist and the client accepts gzip.
            RewriteCond %{HTTP:Accept-encoding} gzip
            RewriteCond %{REQUEST_FILENAME}\.gz -s
            RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

            # Serve gzip compressed JS files if they exist and the client accepts gzip.
            RewriteCond %{HTTP:Accept-encoding} gzip
            RewriteCond %{REQUEST_FILENAME}\.gz -s
            RewriteRule ^(.*)\.js $1\.js\.gz [QSA]

            # Serve correct content types, and prevent mod_deflate double gzip.
            RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
            RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]

            <FilesMatch "(\.js\.gz|\.css\.gz)$">
              # Serve correct encoding type.
              Header append Content-Encoding gzip
              # Force proxies to cache gzipped & non-gzipped css/js files separately.
              Header append Vary Accept-Encoding
            </FilesMatch>
        </IfModule>
    </Directory>

   <Directory {{ document_root }}/sites/default/files>
        # avoid execution of PHP scripts in uploaded files
        AddType text/plain .php
        AddType text/plain .phps
    </Directory>

# vim:set ft=apache:
