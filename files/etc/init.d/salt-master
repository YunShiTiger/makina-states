#!/bin/sh
{% set salt_data = salt['mc_utils.json_load'](salt_data) %}
### BEGIN INIT INFO
# Provides:          {{salt_data['name']}}-{{salt_data['daemon_name']}}
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: {{salt_data['name']}} master control daemon
# Description:       This is a daemon that controls the salt minions
### END INIT INFO

# Author: Michael Prokop <mika@debian.org>

PATH={{salt_data['bin_dir']}}:/sbin:/usr/sbin:/bin
DESC="{{salt_data['daemon_name']}} control daemon"
NAME={{salt_data['daemon_name']}}
DAEMON={{salt_data['bin_dir']}}/{{salt_data['daemon_name']}}
DAEMON_ARGS="-d"
#DAEMON_ARGS="-c {{salt_data['conf_prefix']}} -d"
PIDFILE={{salt_data['run_prefix']}}/$NAME.pid
SCRIPTNAME={{salt_data['init_d']}}/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start() {
    pid=$(pidofproc -p $PIDFILE $DAEMON)
    if [ -n "$pid" ] ; then
        log_begin_msg "$DESC already running."
        log_end_msg 0
        exit 0
    fi
    ulimit -f unlimited
    ulimit -t unlimited
    ulimit -v unlimited
    ulimit -n 64000
    ulimit -m unlimited

    # In dash, ulimit takes -p for maximum user processes
    # In bash, it's -u
    if readlink /proc/$$/exe | grep -q dash
    then
            ulimit -p 32000
    else
            ulimit -u 32000
    fi


    log_daemon_msg "Starting $DESC"
    # remove stale sockets
    rm -f {{salt_data['sock_dir']}}/minion_event*ipc
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS
    log_end_msg $?
}

do_stop() {
    log_begin_msg "Stopping $DESC ..."
    start-stop-daemon --stop --retry TERM/5 --quiet --oknodo --pidfile $PIDFILE
    rm -f {{salt_data['sock_dir']}}/minion_event*ipc
    RC=$?
    [ $RC -eq 0 ] && rm -f $PIDFILE
    log_end_msg $RC
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
              2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
              2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    #reload)
        # not implemented
        #;;
    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
              do_start
              case "$?" in
                  0) log_end_msg 0 ;;
                  1) log_end_msg 1 ;; # Old process is still running
                  *) log_end_msg 1 ;; # Failed to start
              esac
              ;;
          *)
              # Failed to stop
              log_end_msg 1
              ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

exit 0
