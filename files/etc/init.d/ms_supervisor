#!/usr/bin/env bash
source /etc/profile || /bin/true
{% set data = salt['mc_supervisor.settings']() %}
# MANAGED VIA SALT -- DO NOT EDIT
# RedHat startup script for a supervisor instance
# chkconfig: - 90 15
# description: supervisor init script
### BEGIN INIT INFO
# Provides:          ms_supervisor
# Required-Start:    $syslog $network $time
# Required-Stop:     $syslog $network
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ms_supervisor
# Description:       ms_supervisor
### END INIT INFO
. {{data.venv}}/bin/activate
TMPDIR="{{data.supervisord.tmpdir}}"
EFFECTIVE_USER="{{data.supervisord.user}}"
FORCE_STOP="1"
supervisorctl="$(which ms_supervisorctl)"
supervisord="$(which supervisord)"
lock="/var/run/${name}.lock"
export TMPDIR
[ "x$supervisord" != "x" ] || exit 1
[ "x$supervisorctl" != "x" ] || exit 1
[ -f $supervisord ] || exit 1
[ -f $supervisorctl ] || exit 1

is_lxc() {
    echo  "$(cat -e /proc/1/environ |grep container=lxc|wc -l|sed -e "s/ //g")"
}

filter_host_pids() {
    if [ "x$(is_lxc)" != "x0" ];then
        echo "${@}"
    else
        for pid in ${@};do
            if [ "x$(grep -q lxc /proc/${pid}/cgroup 2>/dev/null;echo "${?}")" != "x0" ];then
                 echo ${pid}
             fi
         done
    fi
}


supervisord_pids() {
    filter_host_pids $(\
        ps aux|grep supervisord|grep -v grep|grep -v supervisorctl|awk '{print $2}')
}

RETVAL=0
start() {
    echo "Starting ${supervisord}"
    "${supervisord}" -c '{{data.conf}}' "${@}"
    RETVAL="${?}"
    if [ "x${RETVAL}" = "x0" ];then
        touch "${lock}"
    fi
    if [ -e "${lock}" ];then
        chown "${EFFECTIVE_USER}" "${lock}"
    fi
    return ${RETVAL}
}
stop() {
    echo "Stopping ${supervisord}"
    pids="$(supervisord_pids)"
    if [ "x$(echo ${pids}|wc -w|sed -e "s/  //g")" != "x0" ];then
        "${supervisorctl}" shutdown
        if [ "x${FORCE_STOP}" = "x" ];then
            echo "Waiting {{data.program.stopwaitsecs|int+1}}sec for exit"
            sleep "{{data.program.stopwaitsecs|int+1}}"
        fi
    fi
    pids="$(supervisord_pids)"
    if [ "x$(echo ${pids}|wc -w|sed -e "s/  //g")" != "x0" ];then
        for pid in ${pids};do
            kill -9 $pid || /bin/true
        done
    fi
    RETVAL=${?}
    if [ -e "${lock}" ] &&  [ "x${RETVAL}" = "x0" ];then
        rm -f "${lock}"
    fi
    return ${RETVAL}
}
reload() {
    echo "Reloading ${supervisord}"
    pids="$(supervisord_pids)"
    if [ "x$(echo ${pids}|wc -w|sed -e "s/  //g")" != "x0" ];then
        "${supervisorctl}" reread && "${supervisorctl}" update
    else
        start "${@}"
    fi
    RETVAL=$?
    return ${RETVAL}
}
case "${1}" in
    start)
        shift
        start "$@"
        ;;
    stop)
        shift
        stop "$@"
        ;;
    graceful-stop)
        FORCE_STOP=""
        shift
        stop "$@"
        ;;
    restart)
        shift
        stop
        start "$@"
        ;;
    reload)
        shift
        reload "$@"
        ;;
    *)
        echo "${0} start|stop|restart|reload|graceful-stop"
        ;;
esac
exit $REVAL
# vim:set ft=sh:
