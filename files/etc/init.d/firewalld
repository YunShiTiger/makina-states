#! /bin/sh
### BEGIN INIT INFO
# Provides:          firewalld
# Required-Start:    $remote_fs dbus
# Required-Stop:     $remote_fs dbus
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: dynamic firewall daemon
# Description:       firewalld is a dynamically managed firewall daemon
#                    with support for network/firewall zones to define
#                    the trust level of network connections or interfaces.
#                    It provides a D-Bus interface for services or
#                    applications to add and apply firewall rules on-the-fly.
### END INIT INFO

#
# Author: Michael Biebl <biebl@debian.org>
#

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="dynamic firewall daemon"
NAME=firewalld

DAEMON=/usr/sbin/firewalld
PIDFILE=/var/run/firewalld.pid

SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0
if [  -f "/etc/default/$NAME" ];then . "/etc/default/$NAME";fi

# Define LSB log_* functions.
. /lib/lsb/init-functions

is_container() {
    echo  "$(cat -e /proc/1/environ |grep container=|wc -l|sed -e "s/ //g")"
}

filter_host_pids() {
    pids=""
    if [ "x$(is_container)" != "x0" ];then
        pids="${pids} $(echo "${@}")"
    else
        for pid in ${@};do
            if [ "x$(grep -q /lxc/ /proc/${pid}/cgroup 2>/dev/null;echo "${?}")" != "x0" ];then
                pids="${pids} $(echo "${pid}")"
            fi
         done
    fi
    echo "${pids}" | sed -e "s/\(^ \+\)\|\( \+$\)//g"
}

do_makina_rules() {
    if [ -x /usr/bin/ms_firewalld.py ];then
        /usr/bin/ms_firewalld.py
    fi
}

do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   other if daemon could not be stopped or a failure occurred
    start-stop-daemon --stop --quiet --retry 5 --pidfile $PIDFILE --name $NAME
    pids=$(filter_host_pids $(ps aux|grep firewalld|grep python|awk '{print $2}'))
    if [ "x${pids}" != "x" ];then
        sleep 4
        # let a little more time for a chance to exit
        pids=$(filter_host_pids $(ps aux|grep firewalld|grep python|awk '{print $2}'))
    fi
    for i in ${pids};do
        kill -9 ${i} || /bin/true
    done
}

do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   other if daemon could not be started or a failure occured
    if [ "x${FIREWALLD_DISABLED}" = "x" ];then
        start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- ${FIREWALLD_ARGS}
        do_makina_rules
    else
        # try to stop .. on start if the firewall is disabled
        do_stop
    fi
}

do_reload()
{
    if [ "x${FIREWALLD_DISABLED}" = "x" ];then
        start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE --name $NAME
        do_makina_rules
    else
        do_stop
    fi
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0) log_end_msg 0 ;;
        1) log_progress_msg "already started"
           log_end_msg 0 ;;
        *) log_end_msg 1 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0) log_end_msg 0 ;;
        1) log_progress_msg "already stopped"
           log_end_msg 0 ;;
        *) log_end_msg 1 ;;
    esac
    ;;
  reload|force-reload)
    log_daemon_msg "Reloading $DESC" "$NAME"
    do_reload
    log_end_msg $?
    ;;
  restart)
    $0 stop
    $0 start
    ;;
  status)
    status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|reload|status}" >&2
    exit 3
    ;;
esac
