<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project_name on Makina States</title>
    <link>/tags/project_name/index.xml</link>
    <description>Recent content in Project_name on Makina States</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <atom:link href="/tags/project_name/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Usage</title>
      <link>/reference/projects/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/reference/projects/usage/</guid>
      <description>

&lt;h2 id=&#34;deployment-stategy&#34;&gt;Deployment stategy&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To sum all that up, when beginning a project you will:

&lt;ul&gt;
&lt;li&gt;Initialize if not done a project structure with&lt;br/&gt;
&lt;code&gt;salt-call mc_project.init_project project&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;If you do not want git remotes, you can alternativly use&lt;br/&gt;
&lt;code&gt;salt-call mc_project.init_project project remote_less=true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;add a &lt;strong&gt;.salt&lt;/strong&gt; folder alongside your project codebase (in it&amp;rsquo;s
git repo).&lt;/li&gt;
&lt;li&gt;deploy it, either by:

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;remote_less=True&lt;/strong&gt; mode or connected to the remote host to deploy onto:

&lt;ul&gt;
&lt;li&gt;edit/commit/push in &lt;code&gt;host:/srv/projects/&amp;lt;project&amp;gt;/pillar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;edit/commit/push/push to force in &lt;code&gt;host:/srv/projects/&amp;lt;project&amp;gt;/project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launch the &lt;code&gt;salt-call mc_project.deploy &amp;lt;project&amp;gt; only=install,fixperms,sync_modules&lt;/code&gt; dance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;remote_less=False&lt;/strong&gt; mode:

&lt;ul&gt;
&lt;li&gt;git push your &lt;strong&gt;pillar&lt;/strong&gt; files to&lt;br/&gt;
&lt;code&gt;host:/srv/projects/&amp;lt;project&amp;gt;/git/pillar.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;git push your &lt;strong&gt;project code&lt;/strong&gt; to&lt;br/&gt;
&lt;code&gt;host:/srv/projects/&amp;lt;project&amp;gt;/git/project.git&lt;/code&gt;&lt;br/&gt;
(this last push triggers a deploy on the remote server)&lt;/li&gt;
&lt;li&gt;Your can use &lt;code&gt;--force&lt;/code&gt; as the deploy system only await the
&lt;code&gt;.salt&lt;/code&gt; folder. As long as the folder is present of the
working copy you are sending, the deploy system will be happy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Wash, Rince, Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;initialize-the-project-layout&#34;&gt;Initialize the project layout&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first thing to do when deploying a project is to create a &lt;strong&gt;nest&lt;/strong&gt; from it:&lt;br/&gt;
&lt;strong&gt;IF IT IS NOT ALREADY DONE&lt;/strong&gt; (just &lt;code&gt;ls /srv/projects&lt;/code&gt; to check):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;bin/salt-call --local --retcode-passthrough -lall mc_project.init_project &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &amp;lt;project_name&amp;gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;remote_less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;false/true&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Dont be long, and dont use &lt;code&gt;-&lt;/code&gt; &amp;amp; &lt;code&gt;_&lt;/code&gt; for the &lt;code&gt;project name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(opt) &lt;code&gt;remote_less&lt;/code&gt; instructs to deploy with or without the git
repos that allow users to use (or not) a &lt;strong&gt;git push to prod to deploy&lt;/strong&gt; workflow.

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;remote_less=true&lt;/code&gt;, the git repos wont be created, and you
will have to use only the the &lt;code&gt;local build workflow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;remote_less=false&lt;/code&gt;, you can use both the &lt;code&gt;local build workflow&lt;/code&gt;
and the &lt;code&gt;git push to prod deploy workflow&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--local -lall&lt;/code&gt; instructs to run in masterless mode and extra verbosity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mc_project.init_project $project&lt;/code&gt; instructs to create the layout of
the name &lt;code&gt;$project&lt;/code&gt; project living into &lt;code&gt;/srv/projects/$project/project&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-deployment-procedure&#34;&gt;Running deployment procedure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The following command is the nerve of the war:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;bin/salt-call --local --retcode-passthrough -lall &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
     mc_project.deploy &lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;step2&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;,step1&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;only_steps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;step2&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;,step1&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mc_project.deploy $project&lt;/code&gt; instructs to deploy the name &lt;code&gt;$project&lt;/code&gt;
project living into &lt;code&gt;/srv/projects/$project/project&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(opt) &lt;code&gt;only&lt;/code&gt; instructs to execute only the named global phases, and
when deploying directly onto a machine, you will certainly have to
use &lt;code&gt;only=install,fixperms,sync_modules&lt;/code&gt; to avoid the
archive/sync/rollback steps.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(opt) &lt;code&gt;only_steps&lt;/code&gt; instruct to execute only a specific or multiple
specific sls from the &lt;strong&gt;.salt&lt;/strong&gt; folder during the &lt;strong&gt;install&lt;/strong&gt; phase.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;

&lt;h3 id=&#34;projects-reminder-tool&#34;&gt;Projects reminder tool&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: you can use it only if you provisionned your project
with attached remotes (the default)&lt;/li&gt;
&lt;li&gt;Remember use the remotes inside &lt;code&gt;/srv/projects/&amp;lt;project&amp;gt;/git&lt;/code&gt; and
not directly the working copies&lt;/li&gt;
&lt;li&gt;If you push on the pillar, it does not trigger a deploy&lt;/li&gt;
&lt;li&gt;If you push on the project, it triggers the full deploy procedure
including archive/sync/rollback.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To get useful push informations, on the remote server to deploy to,
just do&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;salt-call -lall mc_project.report
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;local-build&#34;&gt;Local build&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/install&#34;&gt;install makinastates&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Initialise the layout (only the first time)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;ssh root@remoteserver
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
salt-call mc_project.init_project &lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;remote_less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the pillar&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /srv/projects/&lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt;/pillar
&lt;span class=&#34;nv&#34;&gt;$EDITOR&lt;/span&gt; init.sls
git commit -am up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add your project code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /srv/projects/&lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt;/project
&lt;span class=&#34;c1&#34;&gt;# if not already done, add your project repo remote&lt;/span&gt;
git remote add o https://github.com/o/myproject.git
&lt;span class=&#34;c1&#34;&gt;# in any cases, update your code&lt;/span&gt;
git fetch --all
git reset --hard remotes/o/&amp;lt;the branch to deploy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the deployment procedure, &lt;strong&gt;skipping archive/rollback&lt;/strong&gt; as you are connected and live editing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;salt-call mc_project.deploy &lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;install,fixperms,sync_modules
&lt;span class=&#34;c1&#34;&gt;# or to deploy only a specific sls&lt;/span&gt;
salt-call &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    mc_project.deploy &lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;only&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;install,fixperms,sync_modules &lt;span class=&#34;nv&#34;&gt;only_steps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;000_foo.sls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you want to commit your changes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; vms/VM/srv/&lt;span class=&#34;nv&#34;&gt;$project&lt;/span&gt;/project
git push o HEAD:&amp;lt;master&amp;gt; &lt;span class=&#34;c1&#34;&gt;# replace master by the branch you want to push&lt;/span&gt;
                         &lt;span class=&#34;c1&#34;&gt;# back onto your forge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-push-to-prod-deploy&#34;&gt;Git push to prod deploy&lt;/h3&gt;

&lt;h4 id=&#34;deploy&#34;&gt;Deploy&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The following lines edit the pillar, and push it, this does not trigger a deploy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$WORKSPACE&lt;/span&gt;/myproject
git clone host:/srv/projects/project/git/pillar.git
&lt;span class=&#34;nv&#34;&gt;$EDITOR&lt;/span&gt; pillar/init.sls
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; pillar&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;git commit -am up&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;git push&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following lines prepare a clone of your project codebase to be able
to be deployed onto production or staging servers&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$WORKSPACE&lt;/span&gt;/myproject
git clone git@github.com/makinacorpus/myawsomeproject.git
git remote add prod /srv/projects/project/git/project.git
git fetch --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To trigger a remote deployment, now you can do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;git push &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--force&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; prod &amp;lt;mybranch&amp;gt;:master
eg: git push &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--force&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; prod &amp;lt;mybranch&amp;gt;:master
eg: git push &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--force&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; prod awsome_feature:master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;REMINDER&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DONT MESS WITH THE &lt;strong&gt;ORIGIN&lt;/strong&gt; REMOTE when your are connected
to your server in any of the &lt;code&gt;pillar&lt;/code&gt; or
&lt;code&gt;project&lt;/code&gt; directory..&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;branchname&amp;gt;:master&lt;/code&gt; is really important as everything
in the production git repositories is wired on the &lt;code&gt;master&lt;/code&gt;
branch. You can push any branch you want from your original
repository, but in production, there is only &lt;strong&gt;master&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration-pillar-variables&#34;&gt;Configuration pillar &amp;amp; variables&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We provide in &lt;strong&gt;mc_project&lt;/strong&gt; a powerfull mecanism to define default
variables used in your deployments. hat you can safely override in the
salt pillar files. This means that you can set some default values for,
eg a domain name or a password, and input the production values that you
won&amp;rsquo;t commit along side your project codebase.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default values have to be stored inside the &lt;strong&gt;PILLAR.sample&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;Some of those variables, the one at the first level are mostly read
only and setup by makina-states itself. The most important are:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: project name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;: the system user of your project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group&lt;/code&gt;: the system group of your project&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: top level free variables mapping&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project_root&lt;/code&gt;: project root absolute path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data_root&lt;/code&gt;: persistent folder absolute path&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default_env&lt;/code&gt;: environment (staging/prod/dev)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pillar_root&lt;/code&gt;: absolute path to the pillar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fqdn&lt;/code&gt;: machine FQDN&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The only variables that you can edit at the first level are:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;remote_less&lt;/strong&gt;: is this project using git remotes for
triggering deployments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default_env&lt;/strong&gt;: environement (valid values
are staging/dev/prod)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;env_defaults&lt;/strong&gt;: indexed by &lt;strong&gt;env&lt;/strong&gt; dict that overloads data
(pillar will still have the priority)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;os_defaults&lt;/strong&gt;: indexed by &lt;strong&gt;os&lt;/strong&gt; dict that overloads data
(pillar will still have the priority)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The other variables, members of the &lt;strong&gt;data&lt;/strong&gt; sub entry are free for
you to add/edit.&lt;/li&gt;
&lt;li&gt;Any thing in the pillar &lt;code&gt;pillar/init.sls&lt;/code&gt; overloads what is in
&lt;code&gt;project/.salt/PILLAR.sample&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can get and consult the result of the configuration assemblage like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;  bin/salt-call --retcode-passthrough mc_project.get_configuration &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remember that projects have a name, and the pillar key to configure
and overload your project configuration is based on this key.&lt;/p&gt;

&lt;p&gt;If your project is name &lt;strong&gt;foo&lt;/strong&gt;, you ll have to use
&lt;strong&gt;makina-projects.foo&lt;/strong&gt; in place of &lt;strong&gt;makina-projects.example&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;in &lt;code&gt;project/.salt/PILLAR.sample&lt;/code&gt;, you have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;makina-projects.projectname&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;l l-Scalar l-Scalar-Plain&#34;&gt;start_cmd&lt;/span&gt;&lt;span class=&#34;p p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;myprog&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;in &lt;code&gt;pillar/init.sls&lt;/code&gt;, you have:&lt;/p&gt;

&lt;p&gt;``yaml
makina-projects.foo:
   data:
     start_cmd: &amp;lsquo;myprog2&amp;rsquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;-   In your states files, you can access the configuration via the magic&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    `opts.ms_project` variable.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;-   In your modules or file templates, you can access the configuration&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    via `salt[&amp;#39;mc_project.get_configuration&amp;#39;(name)`.&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;-   A tip for loading the configuration from a template is doing&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    something like that:&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;```yaml&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;# project/.salt/00_deploy.sls&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cfg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;opts.ms_project&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;toto:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  file.managed:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      - name: &amp;quot;source://makina-projects/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cfg.name&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/files/etc/foo&amp;quot;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      - target: /etc/foo&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      - user &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cfg.user&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      - group &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cfg.user&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;      - defaults:&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;          project: &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cfg.name&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;# project/.salt/files/etc/foo&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;cfg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;opts.ms_project&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;My Super Template of &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cfg.name&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt; will run &lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;cfg.data.start_cmd&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;what-s-happen-when-there-is-a-deploy&#34;&gt;What&amp;rsquo;s happen when there is a deploy ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When you do a git push, you have the full procedure, see
spec doc &amp;lt;project_spec_deploy_proc&amp;gt;&lt;/li&gt;
&lt;li&gt;When you use &lt;code&gt;only=install,fixperms,sync_modules&lt;/code&gt; it only do some
the install &amp;lt;project_spec_proc_install&amp;gt; &amp;amp;
fixperms &amp;lt;project_spec_proc_fixperms&amp;gt; procedures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;saltstack-integration&#34;&gt;SaltStack integration&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As you know in makina-states, there are 2 concurrent salt installs, one
for &lt;strong&gt;salt&lt;/strong&gt;, the one that you use, and one for &lt;strong&gt;mastersalt&lt;/strong&gt; for the
devil ops. In makina-states, we use by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a virtualenv inside &lt;code&gt;/salt-venv/salt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/makina-corpus/salt.git&#34;&gt;salt from a fork&lt;/a&gt;
installed inside &lt;code&gt;/salt-venv/salt/src/salt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the salt file root resides, as usual, in &lt;code&gt;/srv/salt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the salt pillar root resides, as usual, in &lt;code&gt;/srv/pillar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the salt configuration root resides, as usual, in &lt;code&gt;/etc/salt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As you see, the project layout seems not integration on those following
folders, but in fact, the project initialisation routines made symlinks
to integrate it which look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/srv/salt/makina-projects/&lt;project_name&gt;&amp;gt;  -&amp;gt; /srv/projects/&lt;project_name&gt;/project§/.salt&lt;/li&gt;
&lt;li&gt;/srv/pillar/makina-projects/&lt;project_name&gt; -&amp;gt; /srv/projects/&lt;project_name&gt;/pillar&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The pillar is auto included in the &lt;strong&gt;pillar top&lt;/strong&gt;
(&lt;code&gt;/srv/pîllar/top.sls&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The project salt files are not and &lt;strong&gt;must not&lt;/strong&gt; be included in the
salt &lt;strong&gt;top&lt;/strong&gt; for further highstates unless you know what you
are doing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can unlink your project from salt with:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;   bin/salt-call --retcode-passthrough mc_project.unlink &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;You can link project from salt with:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;   bin/salt-call --retcode-passthrough mc_project.link &amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>