#!/usr/bin/env python
def vm_volumes(vm, ret=None, output=True, force=False):
    fname = 'mc_cloud_lxc.vm_volumes'
    _s = __salt__
    _s['mc_api.time_log']('start', fname, vm)
    if not ret:
        ret = result()
    vm_data = _s['mc_api.get_vm'](vm)
    cn = vm_data['target']
    content = "# generated by salt do not edit\n"
    fstab = vm_data['fstab']
    rmark = '/var/lib/lxc/{0}/restart_marker'.format(vm)
    if fstab:
        for i in fstab:
            content += i + '\n'
        cret = cli('mc_utils.manage_file',
                   name='/var/lib/lxc/{0}/fstab'.format(vm),
                   contents=content, mode='750', salt_target=cn)
        if not cret['result']:
            ret['result'] = False
            merge_results(ret, cret)
            ret['comment'] += red('fstab update error for {0}\n'.format(vm))
        elif cret['changes']:
            cret = cli('file.touch', rmark, salt_target=cn)
            ret['comment'] += yellow('fstab updated for {0}\n'.format(vm))
    cmd = ("lxc-stop -t 10 -n \"{0}\";lxc-start -d -n \"{0}\""
           "&& rm -f \"{1}\"").format(vm, rmark)
    if ret['result'] and not cli(
        "cmd.retcode",
        "test -e \"{1}\" &&"
        "test \"x$(lxc-ls --fancy|grep RUNNING|"
        "awk '{{print $1}}'|egrep '^{0}$')\" = 'x{0}'".format(
            vm, rmark), python_shell=True, salt_target=cn
    ):
        # if container is running, restart it
        cret = cli('cmd.run_all', cmd, use_vt=True,
                   python_shell=True, salt_target=cn)
        if cret['retcode']:
            ret['result'] = False
            merge_results(ret, cret)
            ret['comment'] += red(
                'Container {0} error while rebooting\n'.format(vm))
        else:
            ret['comment'] += yellow('Container {0} rebooted\n'.format(vm))
    _s['mc_api.out'](ret, __opts__, output=output)
    _s['mc_api.time_log']('end', fname)
    return ret
# vim:set et sts=4 ts=4 tw=80:
