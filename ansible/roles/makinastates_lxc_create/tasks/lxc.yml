---
- copy:
    src: '~/.ssh/id_rsa.pub'
    dest: '/tmp/ansible_master.pub'
    mode: 644
  tags: makinastates_lxc_create
- debug: {msg: {foo: "{{lxc_from_container}}"}}
  tags: makinastates_lxc_create
- name: lxc create test
  shell: |-
    lxc-ls -P "{{lxc_path}}" --fancy |grep -v ^NAME|awk '{print $1}'|\
    egrep -q "^{{lxc_container_name}}$";echo $?
  register: makinastates_lxc_create_lxc_test
  tags: makinastates_lxc_create,makinastates_lxc_create_lxc
- include: from_template.yml
  when: 'lxc_from_container == ""'
  tags: makinastates_lxc_create,makinastates_lxc_create_lxc_bare
- include: from_image.yml
  when: 'lxc_from_container != ""'
  tags: makinastates_lxc_create,makinastates_lxc_create_lxc_bare
- name: lxc config (from template script)
  template:
    src: "../templates/lxc.conf"
    dest: "{{lxc_path}}/{{lxc_container_name}}/config"
    mode: 600
  notify:
    - "LXC RestartContainer {{lxc_container_name}}"
    - "LXC Registerip {{lxc_container_name}}"
  tags: makinastates_lxc_create,makinastates_lxc_create_lxc
- name: lxc reset script
  template:
    src: '../../../../files/usr/bin/reset-host.py'
    dest: "{{lxc_path}}/{{lxc_container_name}}/reset-host.py"
    mode: 755
  tags: makinastates_lxc_create,makinastates_lxc_create_scripts
- name: lxc manual_lxc_conf init test
  stat:
    path: "{{lxc_path}}/{{lxc_container_name}}/manual_lxc_conf"
  register: lxc_manual_lxc_conf_test
  tags: makinastates_lxc_create,makinastates_lxc_create_manual_lxc_conf
- name: lxc manual_lxc_conf init
  template:
    src: '../templates/{{item}}'
    dest: "{{lxc_path}}/{{lxc_container_name}}/{{item}}"
    mode: 644
  with_items:
    - manual_lxc.conf
  when: not lxc_manual_lxc_conf_test.stat.exists
  tags: makinastates_lxc_create,makinastates_lxc_create_manual_lxc_conf
- name: lxc fstab init test
  stat:
    path: "{{lxc_path}}/{{lxc_container_name}}/fstab"
  register: lxc_fstab_test
  tags: makinastates_lxc_create,makinastates_lxc_create_fstab
- name: lxc fstab init
  template:
    src: '../templates/{{item}}'
    dest: "{{lxc_path}}/{{lxc_container_name}}/{{item}}"
    mode: 644
  with_items:
    - fstab
  when: not lxc_fstab_test.stat.exists
  tags: makinastates_lxc_create,makinastates_lxc_create_fstab
- name: lxc mgmt scripts
  template:
    src: '../templates/{{item}}'
    dest: "{{lxc_path}}/{{lxc_container_name}}/{{item}}"
    mode: 755
  with_items:
    - init.sh
    - prereqs.sh
    - manage.sh
  tags: makinastates_lxc_create,makinastates_lxc_create_scripts
- meta: flush_handlers
- name: "StartContainer{{lxc_container_name}}"
  shell: "{{lxc_path}}/{{lxc_container_name}}/manage.sh start"
  tags: makinastates_lxc_create,makinastates_lxc_create_prereq
- name: lxc reset force
  shell: |
    lxc-attach -P "{{lxc_path}}" -n {{lxc_container_name}} -- rm -f /etc/lxc_reset_done
  tags: makinastates_lxc_create,makinastates_lxc_create_prereq
  when: makinastates_lxc_create_lxc_test['stdout'] == '1'
- name: lxc prereq
  shell: "{{lxc_path}}/{{lxc_container_name}}/prereqs.sh"
  tags: makinastates_lxc_create,makinastates_lxc_create_prereq
- include: register_ip.yml
  tags: makinastates_lxc_create
# during bootstrap, connect to the container via the Bastion method
# and not via the iptables redirections
- add_host:
    name: "{{lxc_container_name}}"
    ansible_host: "{{makinastates_lxc_create_ip.stdout}}"
    ansible_port: 22
    ansible_ssh_common_args: >
      {% if hostvars[inventory_hostname].get('ansible_connection', '') != 'local' %}
      -o ProxyCommand="ssh -W %h:%p -q {{hostvars[inventory_hostname]['ansible_user']}}@{{hostvars[inventory_hostname]['ansible_host']}} -p {{hostvars[inventory_hostname]['ansible_port']}}"
      {% else %}''
      {% endif %}
